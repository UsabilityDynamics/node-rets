/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['digest.js']) {
  _$jscoverage['digest.js'] = [];
  _$jscoverage['digest.js'][8] = 0;
  _$jscoverage['digest.js'][9] = 0;
  _$jscoverage['digest.js'][10] = 0;
  _$jscoverage['digest.js'][12] = 0;
  _$jscoverage['digest.js'][14] = 0;
  _$jscoverage['digest.js'][15] = 0;
  _$jscoverage['digest.js'][23] = 0;
  _$jscoverage['digest.js'][24] = 0;
  _$jscoverage['digest.js'][26] = 0;
  _$jscoverage['digest.js'][28] = 0;
  _$jscoverage['digest.js'][29] = 0;
  _$jscoverage['digest.js'][30] = 0;
  _$jscoverage['digest.js'][31] = 0;
  _$jscoverage['digest.js'][32] = 0;
  _$jscoverage['digest.js'][35] = 0;
  _$jscoverage['digest.js'][36] = 0;
  _$jscoverage['digest.js'][42] = 0;
  _$jscoverage['digest.js'][45] = 0;
  _$jscoverage['digest.js'][46] = 0;
  _$jscoverage['digest.js'][47] = 0;
  _$jscoverage['digest.js'][48] = 0;
  _$jscoverage['digest.js'][49] = 0;
  _$jscoverage['digest.js'][50] = 0;
  _$jscoverage['digest.js'][51] = 0;
  _$jscoverage['digest.js'][52] = 0;
  _$jscoverage['digest.js'][55] = 0;
  _$jscoverage['digest.js'][56] = 0;
  _$jscoverage['digest.js'][57] = 0;
  _$jscoverage['digest.js'][59] = 0;
  _$jscoverage['digest.js'][61] = 0;
  _$jscoverage['digest.js'][62] = 0;
  _$jscoverage['digest.js'][65] = 0;
  _$jscoverage['digest.js'][67] = 0;
  _$jscoverage['digest.js'][68] = 0;
  _$jscoverage['digest.js'][69] = 0;
  _$jscoverage['digest.js'][71] = 0;
  _$jscoverage['digest.js'][73] = 0;
  _$jscoverage['digest.js'][75] = 0;
  _$jscoverage['digest.js'][80] = 0;
  _$jscoverage['digest.js'][81] = 0;
  _$jscoverage['digest.js'][83] = 0;
  _$jscoverage['digest.js'][84] = 0;
  _$jscoverage['digest.js'][85] = 0;
  _$jscoverage['digest.js'][89] = 0;
  _$jscoverage['digest.js'][92] = 0;
  _$jscoverage['digest.js'][100] = 0;
  _$jscoverage['digest.js'][101] = 0;
  _$jscoverage['digest.js'][104] = 0;
  _$jscoverage['digest.js'][105] = 0;
  _$jscoverage['digest.js'][106] = 0;
  _$jscoverage['digest.js'][110] = 0;
  _$jscoverage['digest.js'][114] = 0;
  _$jscoverage['digest.js'][118] = 0;
  _$jscoverage['digest.js'][119] = 0;
}
_$jscoverage['digest.js'].source = ["<span class=\"c\">//</span>","<span class=\"c\">// # Digest Client</span>","<span class=\"c\">//</span>","<span class=\"c\">// Use together with HTTP Client to perform requests to servers protected</span>","<span class=\"c\">// by digest authentication.</span>","<span class=\"c\">//</span>","","<span class=\"k\">var</span> HTTPDigest <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t<span class=\"k\">var</span> curl <span class=\"k\">=</span> require<span class=\"k\">(</span> <span class=\"s\">'node-curl/lib/Curl'</span> <span class=\"k\">);</span>","\t<span class=\"k\">var</span> utility <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'./utility'</span><span class=\"k\">);</span>","","\tprocess<span class=\"k\">.</span>env<span class=\"k\">[</span><span class=\"s\">'NODE_TLS_REJECT_UNAUTHORIZED'</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"s\">'0'</span><span class=\"k\">;</span> <span class=\"c\">// SSL</span>","","\t<span class=\"k\">var</span> HTTPDigest <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> options<span class=\"k\">,</span> callback <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>request<span class=\"k\">(</span>options<span class=\"k\">,</span> <span class=\"s\">'function'</span> <span class=\"k\">===</span> <span class=\"k\">typeof</span> callback <span class=\"k\">?</span> callback <span class=\"k\">:</span> <span class=\"k\">function</span> noop<span class=\"k\">()</span> <span class=\"k\">{}</span> <span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">;</span>","","\t<span class=\"c\">//</span>","\t<span class=\"c\">// ## Make request</span>","\t<span class=\"c\">//</span>","\t<span class=\"c\">// Wraps the http.request function to apply digest authorization.</span>","\t<span class=\"c\">//</span>","\tHTTPDigest<span class=\"k\">.</span>prototype<span class=\"k\">.</span>request <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> options<span class=\"k\">,</span> callback <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","\t\t<span class=\"k\">var</span> request <span class=\"k\">=</span> <span class=\"k\">new</span> curl<span class=\"k\">();</span>","","\t\t<span class=\"k\">var</span> headers <span class=\"k\">=</span> <span class=\"k\">[];</span>","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">in</span> options<span class=\"k\">.</span>headers<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">var</span> val <span class=\"k\">=</span> options<span class=\"k\">.</span>headers<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">||</span> <span class=\"s\">''</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>val<span class=\"k\">.</span>length<span class=\"k\">)</span> val <span class=\"k\">=</span> <span class=\"s\">': '</span> <span class=\"k\">+</span> val<span class=\"k\">;</span>","\t\t\theaders<span class=\"k\">.</span>push<span class=\"k\">(</span>i <span class=\"k\">+</span> val<span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>options<span class=\"k\">.</span>protocol <span class=\"k\">===</span> <span class=\"s\">'https:'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\trequest<span class=\"k\">.</span>setopt<span class=\"k\">(</span><span class=\"s\">'USE_SSL'</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">);</span>","\t\t\t<span class=\"c\">/**</span>","<span class=\"c\">\t\t\t * Many RETS servers have outdated or invalid certificates.</span>","<span class=\"c\">\t\t\t * Technically we don't want to do this, but we can't do much about</span>","<span class=\"c\">\t\t\t * their bad behavior.</span>","<span class=\"c\">\t\t\t */</span>","\t\t\trequest<span class=\"k\">.</span>setopt<span class=\"k\">(</span><span class=\"s\">'SSL_VERIFYPEER'</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t\t","\t\trequest<span class=\"k\">.</span>setopt<span class=\"k\">(</span><span class=\"s\">'URL'</span><span class=\"k\">,</span> options<span class=\"k\">.</span>protocol <span class=\"k\">+</span> <span class=\"s\">'//'</span> <span class=\"k\">+</span> options<span class=\"k\">.</span>host <span class=\"k\">+</span> <span class=\"s\">':'</span> <span class=\"k\">+</span> options<span class=\"k\">.</span>port <span class=\"k\">+</span> options<span class=\"k\">.</span>path <span class=\"k\">);</span>","\t\trequest<span class=\"k\">.</span>setopt<span class=\"k\">(</span><span class=\"s\">'COOKIEJAR'</span><span class=\"k\">,</span> options<span class=\"k\">.</span>cookie<span class=\"k\">);</span>","\t\trequest<span class=\"k\">.</span>setopt<span class=\"k\">(</span><span class=\"s\">'COOKIEFILE'</span><span class=\"k\">,</span> options<span class=\"k\">.</span>cookie<span class=\"k\">);</span>","\t\trequest<span class=\"k\">.</span>setopt<span class=\"k\">(</span><span class=\"s\">'HTTPAUTH'</span><span class=\"k\">,</span> <span class=\"s\">2</span><span class=\"k\">);</span> <span class=\"c\">// Digest auth</span>","\t\trequest<span class=\"k\">.</span>setopt<span class=\"k\">(</span><span class=\"s\">'USERNAME'</span><span class=\"k\">,</span> options<span class=\"k\">.</span>username<span class=\"k\">);</span>","\t\trequest<span class=\"k\">.</span>setopt<span class=\"k\">(</span><span class=\"s\">'PASSWORD'</span><span class=\"k\">,</span> options<span class=\"k\">.</span>password<span class=\"k\">);</span>","\t\trequest<span class=\"k\">.</span>setopt<span class=\"k\">(</span><span class=\"s\">'USERAGENT'</span><span class=\"k\">,</span> options<span class=\"k\">.</span>agent<span class=\"k\">.</span>user<span class=\"k\">);</span>","\t\trequest<span class=\"k\">.</span>setopt<span class=\"k\">(</span><span class=\"s\">'HTTPHEADER'</span><span class=\"k\">,</span> headers<span class=\"k\">);</span>","\t\t<span class=\"c\">// request.setopt('CRLF',1);</span>","","\t\t<span class=\"k\">var</span> body <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span> <span class=\"c\">//empty buffer for full response</span>","\t\t<span class=\"k\">var</span> responseHeaders <span class=\"k\">=</span> <span class=\"k\">[];</span>","\t\t<span class=\"k\">var</span> cookies <span class=\"k\">=</span> <span class=\"k\">[]</span>","","\t\trequest<span class=\"k\">.</span>on<span class=\"k\">(</span><span class=\"s\">'data'</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>chunk<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"c\">/** buffer the response */</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>options<span class=\"k\">.</span>buffer <span class=\"k\">===</span> <span class=\"k\">true</span><span class=\"k\">)</span> body <span class=\"k\">+=</span> chunk<span class=\"k\">;</span>","\t\t\t<span class=\"k\">return</span> chunk<span class=\"k\">.</span>length<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","","\t\trequest<span class=\"k\">.</span>on<span class=\"k\">(</span><span class=\"s\">'header'</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>chunk<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"c\">/** parse headers */</span>","\t\t\t<span class=\"k\">var</span> h <span class=\"k\">=</span> chunk<span class=\"k\">.</span>toString<span class=\"k\">(</span><span class=\"s\">'utf8'</span><span class=\"k\">).</span>trim<span class=\"k\">().</span>split<span class=\"k\">(</span><span class=\"s\">':'</span><span class=\"k\">);</span>","\t\t\t<span class=\"k\">var</span> key <span class=\"k\">=</span> h<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>toString<span class=\"k\">(</span><span class=\"s\">'utf8'</span><span class=\"k\">).</span>trim<span class=\"k\">();</span>","\t\t\t<span class=\"k\">var</span> val <span class=\"k\">=</span> <span class=\"k\">(</span>h<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">])</span> <span class=\"k\">?</span> h<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">].</span>toString<span class=\"k\">(</span><span class=\"s\">'utf8'</span><span class=\"k\">).</span>trim<span class=\"k\">()</span> <span class=\"k\">:</span> <span class=\"s\">''</span><span class=\"k\">;</span>","","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>key <span class=\"k\">==</span> <span class=\"s\">'Set-Cookie'</span><span class=\"k\">)</span> cookies<span class=\"k\">.</span>push<span class=\"k\">(</span>val<span class=\"k\">);</span>","\t\t\t<span class=\"c\">// if (key.indexOf('Set-Cookie') &gt; -1) console.log('Received Cookie',key,val);</span>","\t\t\t<span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>key<span class=\"k\">)</span> responseHeaders<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> val<span class=\"k\">;</span>","","\t\t\t<span class=\"k\">return</span> chunk<span class=\"k\">.</span>length<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","","\t\t<span class=\"c\">// curl.close() should be called in event 'error' and 'end' if the curl won't use any more.</span>","\t\t<span class=\"c\">// or the resource will not release until V8 garbage mark sweep.</span>","\t\trequest<span class=\"k\">.</span>on<span class=\"k\">(</span><span class=\"s\">'error'</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tconsole<span class=\"k\">.</span>trace<span class=\"k\">(</span><span class=\"s\">\"error: \"</span> <span class=\"k\">+</span> e<span class=\"k\">.</span>message<span class=\"k\">);</span>","","\t\t\trequest<span class=\"k\">.</span>close<span class=\"k\">();</span>","\t\t\tprocess<span class=\"k\">.</span>nextTick<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","\t\t\t\tcallback<span class=\"k\">(</span>e<span class=\"k\">,</span> <span class=\"k\">{</span> headers<span class=\"k\">:</span>responseHeaders<span class=\"k\">,</span> body<span class=\"k\">:</span> body <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","","\t\trequest<span class=\"k\">.</span>on<span class=\"k\">(</span><span class=\"s\">'end'</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","","","\t\t\t\tresponseHeaders<span class=\"k\">[</span><span class=\"s\">'Set-Cookie'</span><span class=\"k\">]</span> <span class=\"k\">=</span> cookies<span class=\"k\">;</span>","","\t\t\t\t<span class=\"c\">// var util = require('util');</span>","\t\t\t\t<span class=\"c\">// console.log( 'Error: we received an http - likely an HTML response to follow', request.getinfo('RESPONSE_CODE'), responseHeaders, body);</span>","\t\t\t\t<span class=\"c\">// console.log('Sent:', headers);</span>","\t\t\t\t<span class=\"c\">// console.log('Received', responseHeaders);</span>","\t\t\t\t<span class=\"c\">// console.log('Received Cookies', util.inspect(request.getinfo('COOKIELIST')));</span>","\t\t\t<span class=\"c\">// TODO: error handle / passing based on request.getinfo('RESPONSE_CODE');</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>request<span class=\"k\">.</span>getinfo<span class=\"k\">(</span><span class=\"s\">'RESPONSE_CODE'</span><span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">200</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">return</span> callback<span class=\"k\">(</span> <span class=\"k\">{</span> code<span class=\"k\">:</span> request<span class=\"k\">.</span>getinfo<span class=\"k\">(</span><span class=\"s\">'RESPONSE_CODE'</span><span class=\"k\">),</span> request<span class=\"k\">:</span> request <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> <span class=\"k\">null</span> <span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span>","","\t\t\trequest<span class=\"k\">.</span>close<span class=\"k\">();</span>","\t\t\tprocess<span class=\"k\">.</span>nextTick<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","\t\t\t\tcallback<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">,</span> <span class=\"k\">{</span> headers<span class=\"k\">:</span>responseHeaders<span class=\"k\">,</span> body<span class=\"k\">:</span> body <span class=\"k\">}</span><span class=\"k\">,</span> body<span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","","\t\t<span class=\"k\">return</span> request<span class=\"k\">;</span>","\t<span class=\"k\">}</span><span class=\"k\">;</span>","","\t<span class=\"c\">// Return response handler</span>","\t<span class=\"k\">return</span> HTTPDigest<span class=\"k\">;</span>","","<span class=\"k\">}</span><span class=\"k\">();</span>","","module<span class=\"k\">.</span>exports <span class=\"k\">=</span> <span class=\"k\">function</span> createDigestClient<span class=\"k\">(</span> options<span class=\"k\">,</span> callback <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">return</span> <span class=\"k\">new</span> HTTPDigest<span class=\"k\">(</span> options<span class=\"k\">,</span> callback <span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>",""];
_$jscoverage['digest.js'][8]++;
var HTTPDigest = (function () {
  _$jscoverage['digest.js'][9]++;
  var curl = require("node-curl/lib/Curl");
  _$jscoverage['digest.js'][10]++;
  var utility = require("./utility");
  _$jscoverage['digest.js'][12]++;
  process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
  _$jscoverage['digest.js'][14]++;
  var HTTPDigest = (function (options, callback) {
  _$jscoverage['digest.js'][15]++;
  return this.request(options, (("function" === (typeof callback))? callback: (function noop() {
})));
});
  _$jscoverage['digest.js'][23]++;
  HTTPDigest.prototype.request = (function (options, callback) {
  _$jscoverage['digest.js'][24]++;
  var self = this;
  _$jscoverage['digest.js'][26]++;
  var request = new curl();
  _$jscoverage['digest.js'][28]++;
  var headers = [];
  _$jscoverage['digest.js'][29]++;
  for (var i in options.headers) {
    _$jscoverage['digest.js'][30]++;
    var val = (options.headers[i] || "");
    _$jscoverage['digest.js'][31]++;
    if (val.length) {
      _$jscoverage['digest.js'][31]++;
      val = (": " + val);
    }
    _$jscoverage['digest.js'][32]++;
    headers.push((i + val));
}
  _$jscoverage['digest.js'][35]++;
  if ((options.protocol === "https:")) {
    _$jscoverage['digest.js'][36]++;
    request.setopt("USE_SSL", true);
    _$jscoverage['digest.js'][42]++;
    request.setopt("SSL_VERIFYPEER", false);
  }
  _$jscoverage['digest.js'][45]++;
  request.setopt("URL", (options.protocol + "//" + options.host + ":" + options.port + options.path));
  _$jscoverage['digest.js'][46]++;
  request.setopt("COOKIEJAR", options.cookie);
  _$jscoverage['digest.js'][47]++;
  request.setopt("COOKIEFILE", options.cookie);
  _$jscoverage['digest.js'][48]++;
  request.setopt("HTTPAUTH", 2);
  _$jscoverage['digest.js'][49]++;
  request.setopt("USERNAME", options.username);
  _$jscoverage['digest.js'][50]++;
  request.setopt("PASSWORD", options.password);
  _$jscoverage['digest.js'][51]++;
  request.setopt("USERAGENT", options.agent.user);
  _$jscoverage['digest.js'][52]++;
  request.setopt("HTTPHEADER", headers);
  _$jscoverage['digest.js'][55]++;
  var body = "";
  _$jscoverage['digest.js'][56]++;
  var responseHeaders = [];
  _$jscoverage['digest.js'][57]++;
  var cookies = [];
  _$jscoverage['digest.js'][59]++;
  request.on("data", (function (chunk) {
  _$jscoverage['digest.js'][61]++;
  if ((options.buffer === true)) {
    _$jscoverage['digest.js'][61]++;
    body += chunk;
  }
  _$jscoverage['digest.js'][62]++;
  return chunk.length;
}));
  _$jscoverage['digest.js'][65]++;
  request.on("header", (function (chunk) {
  _$jscoverage['digest.js'][67]++;
  var h = chunk.toString("utf8").trim().split(":");
  _$jscoverage['digest.js'][68]++;
  var key = h[0].toString("utf8").trim();
  _$jscoverage['digest.js'][69]++;
  var val = (h[1]? h[1].toString("utf8").trim(): "");
  _$jscoverage['digest.js'][71]++;
  if ((key == "Set-Cookie")) {
    _$jscoverage['digest.js'][71]++;
    cookies.push(val);
  }
  else {
    _$jscoverage['digest.js'][73]++;
    if (key) {
      _$jscoverage['digest.js'][73]++;
      responseHeaders[key] = val;
    }
  }
  _$jscoverage['digest.js'][75]++;
  return chunk.length;
}));
  _$jscoverage['digest.js'][80]++;
  request.on("error", (function (e) {
  _$jscoverage['digest.js'][81]++;
  console.trace(("error: " + e.message));
  _$jscoverage['digest.js'][83]++;
  request.close();
  _$jscoverage['digest.js'][84]++;
  process.nextTick((function () {
  _$jscoverage['digest.js'][85]++;
  callback(e, {headers: responseHeaders, body: body}, null);
}));
}));
  _$jscoverage['digest.js'][89]++;
  request.on("end", (function () {
  _$jscoverage['digest.js'][92]++;
  responseHeaders["Set-Cookie"] = cookies;
  _$jscoverage['digest.js'][100]++;
  if ((request.getinfo("RESPONSE_CODE") !== 200)) {
    _$jscoverage['digest.js'][101]++;
    return callback({code: request.getinfo("RESPONSE_CODE"), request: request}, null, null);
  }
  _$jscoverage['digest.js'][104]++;
  request.close();
  _$jscoverage['digest.js'][105]++;
  process.nextTick((function () {
  _$jscoverage['digest.js'][106]++;
  callback(null, {headers: responseHeaders, body: body}, body);
}));
}));
  _$jscoverage['digest.js'][110]++;
  return request;
});
  _$jscoverage['digest.js'][114]++;
  return HTTPDigest;
})();
_$jscoverage['digest.js'][118]++;
module.exports = (function createDigestClient(options, callback) {
  _$jscoverage['digest.js'][119]++;
  return new HTTPDigest(options, callback);
});
