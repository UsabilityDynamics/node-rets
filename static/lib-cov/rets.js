/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['rets.js']) {
  _$jscoverage['rets.js'] = [];
  _$jscoverage['rets.js'][40] = 0;
  _$jscoverage['rets.js'][41] = 0;
  _$jscoverage['rets.js'][43] = 0;
  _$jscoverage['rets.js'][44] = 0;
  _$jscoverage['rets.js'][46] = 0;
  _$jscoverage['rets.js'][47] = 0;
  _$jscoverage['rets.js'][50] = 0;
  _$jscoverage['rets.js'][52] = 0;
  _$jscoverage['rets.js'][55] = 0;
  _$jscoverage['rets.js'][56] = 0;
  _$jscoverage['rets.js'][59] = 0;
  _$jscoverage['rets.js'][60] = 0;
  _$jscoverage['rets.js'][61] = 0;
  _$jscoverage['rets.js'][66] = 0;
  _$jscoverage['rets.js'][67] = 0;
  _$jscoverage['rets.js'][70] = 0;
  _$jscoverage['rets.js'][71] = 0;
  _$jscoverage['rets.js'][74] = 0;
  _$jscoverage['rets.js'][77] = 0;
  _$jscoverage['rets.js'][78] = 0;
  _$jscoverage['rets.js'][79] = 0;
  _$jscoverage['rets.js'][82] = 0;
  _$jscoverage['rets.js'][97] = 0;
  _$jscoverage['rets.js'][104] = 0;
  _$jscoverage['rets.js'][119] = 0;
  _$jscoverage['rets.js'][120] = 0;
  _$jscoverage['rets.js'][123] = 0;
  _$jscoverage['rets.js'][142] = 0;
  _$jscoverage['rets.js'][144] = 0;
  _$jscoverage['rets.js'][145] = 0;
  _$jscoverage['rets.js'][148] = 0;
  _$jscoverage['rets.js'][149] = 0;
  _$jscoverage['rets.js'][150] = 0;
  _$jscoverage['rets.js'][154] = 0;
  _$jscoverage['rets.js'][162] = 0;
  _$jscoverage['rets.js'][178] = 0;
  _$jscoverage['rets.js'][181] = 0;
  _$jscoverage['rets.js'][200] = 0;
  _$jscoverage['rets.js'][208] = 0;
  _$jscoverage['rets.js'][209] = 0;
  _$jscoverage['rets.js'][217] = 0;
  _$jscoverage['rets.js'][218] = 0;
  _$jscoverage['rets.js'][226] = 0;
  _$jscoverage['rets.js'][234] = 0;
  _$jscoverage['rets.js'][235] = 0;
  _$jscoverage['rets.js'][236] = 0;
  _$jscoverage['rets.js'][250] = 0;
  _$jscoverage['rets.js'][251] = 0;
  _$jscoverage['rets.js'][270] = 0;
  _$jscoverage['rets.js'][273] = 0;
  _$jscoverage['rets.js'][288] = 0;
  _$jscoverage['rets.js'][291] = 0;
  _$jscoverage['rets.js'][308] = 0;
  _$jscoverage['rets.js'][310] = 0;
  _$jscoverage['rets.js'][311] = 0;
  _$jscoverage['rets.js'][323] = 0;
  _$jscoverage['rets.js'][326] = 0;
  _$jscoverage['rets.js'][339] = 0;
  _$jscoverage['rets.js'][360] = 0;
  _$jscoverage['rets.js'][362] = 0;
  _$jscoverage['rets.js'][363] = 0;
  _$jscoverage['rets.js'][365] = 0;
  _$jscoverage['rets.js'][369] = 0;
  _$jscoverage['rets.js'][371] = 0;
  _$jscoverage['rets.js'][398] = 0;
  _$jscoverage['rets.js'][400] = 0;
  _$jscoverage['rets.js'][401] = 0;
  _$jscoverage['rets.js'][405] = 0;
  _$jscoverage['rets.js'][408] = 0;
  _$jscoverage['rets.js'][409] = 0;
  _$jscoverage['rets.js'][411] = 0;
  _$jscoverage['rets.js'][412] = 0;
  _$jscoverage['rets.js'][413] = 0;
  _$jscoverage['rets.js'][417] = 0;
  _$jscoverage['rets.js'][423] = 0;
  _$jscoverage['rets.js'][441] = 0;
  _$jscoverage['rets.js'][443] = 0;
  _$jscoverage['rets.js'][444] = 0;
  _$jscoverage['rets.js'][446] = 0;
  _$jscoverage['rets.js'][450] = 0;
  _$jscoverage['rets.js'][451] = 0;
  _$jscoverage['rets.js'][453] = 0;
  _$jscoverage['rets.js'][481] = 0;
  _$jscoverage['rets.js'][482] = 0;
  _$jscoverage['rets.js'][484] = 0;
  _$jscoverage['rets.js'][485] = 0;
  _$jscoverage['rets.js'][486] = 0;
  _$jscoverage['rets.js'][489] = 0;
  _$jscoverage['rets.js'][490] = 0;
  _$jscoverage['rets.js'][491] = 0;
  _$jscoverage['rets.js'][493] = 0;
  _$jscoverage['rets.js'][498] = 0;
  _$jscoverage['rets.js'][499] = 0;
  _$jscoverage['rets.js'][500] = 0;
  _$jscoverage['rets.js'][503] = 0;
  _$jscoverage['rets.js'][504] = 0;
  _$jscoverage['rets.js'][506] = 0;
  _$jscoverage['rets.js'][507] = 0;
  _$jscoverage['rets.js'][511] = 0;
  _$jscoverage['rets.js'][512] = 0;
  _$jscoverage['rets.js'][514] = 0;
  _$jscoverage['rets.js'][515] = 0;
  _$jscoverage['rets.js'][518] = 0;
  _$jscoverage['rets.js'][520] = 0;
  _$jscoverage['rets.js'][521] = 0;
  _$jscoverage['rets.js'][523] = 0;
  _$jscoverage['rets.js'][526] = 0;
  _$jscoverage['rets.js'][527] = 0;
  _$jscoverage['rets.js'][529] = 0;
  _$jscoverage['rets.js'][532] = 0;
  _$jscoverage['rets.js'][533] = 0;
  _$jscoverage['rets.js'][539] = 0;
  _$jscoverage['rets.js'][540] = 0;
  _$jscoverage['rets.js'][541] = 0;
  _$jscoverage['rets.js'][543] = 0;
  _$jscoverage['rets.js'][544] = 0;
  _$jscoverage['rets.js'][545] = 0;
  _$jscoverage['rets.js'][546] = 0;
  _$jscoverage['rets.js'][550] = 0;
  _$jscoverage['rets.js'][551] = 0;
  _$jscoverage['rets.js'][552] = 0;
  _$jscoverage['rets.js'][555] = 0;
  _$jscoverage['rets.js'][557] = 0;
  _$jscoverage['rets.js'][582] = 0;
  _$jscoverage['rets.js'][584] = 0;
  _$jscoverage['rets.js'][587] = 0;
  _$jscoverage['rets.js'][588] = 0;
  _$jscoverage['rets.js'][589] = 0;
  _$jscoverage['rets.js'][594] = 0;
  _$jscoverage['rets.js'][597] = 0;
  _$jscoverage['rets.js'][598] = 0;
  _$jscoverage['rets.js'][601] = 0;
  _$jscoverage['rets.js'][602] = 0;
  _$jscoverage['rets.js'][606] = 0;
  _$jscoverage['rets.js'][607] = 0;
  _$jscoverage['rets.js'][611] = 0;
  _$jscoverage['rets.js'][612] = 0;
  _$jscoverage['rets.js'][613] = 0;
  _$jscoverage['rets.js'][616] = 0;
  _$jscoverage['rets.js'][619] = 0;
  _$jscoverage['rets.js'][620] = 0;
  _$jscoverage['rets.js'][621] = 0;
  _$jscoverage['rets.js'][622] = 0;
  _$jscoverage['rets.js'][623] = 0;
  _$jscoverage['rets.js'][626] = 0;
  _$jscoverage['rets.js'][627] = 0;
  _$jscoverage['rets.js'][628] = 0;
  _$jscoverage['rets.js'][631] = 0;
  _$jscoverage['rets.js'][632] = 0;
  _$jscoverage['rets.js'][633] = 0;
  _$jscoverage['rets.js'][636] = 0;
  _$jscoverage['rets.js'][637] = 0;
  _$jscoverage['rets.js'][638] = 0;
  _$jscoverage['rets.js'][641] = 0;
  _$jscoverage['rets.js'][642] = 0;
  _$jscoverage['rets.js'][643] = 0;
  _$jscoverage['rets.js'][646] = 0;
  _$jscoverage['rets.js'][647] = 0;
  _$jscoverage['rets.js'][648] = 0;
  _$jscoverage['rets.js'][651] = 0;
  _$jscoverage['rets.js'][652] = 0;
  _$jscoverage['rets.js'][653] = 0;
  _$jscoverage['rets.js'][657] = 0;
  _$jscoverage['rets.js'][658] = 0;
  _$jscoverage['rets.js'][669] = 0;
  _$jscoverage['rets.js'][671] = 0;
  _$jscoverage['rets.js'][673] = 0;
  _$jscoverage['rets.js'][674] = 0;
  _$jscoverage['rets.js'][677] = 0;
  _$jscoverage['rets.js'][678] = 0;
  _$jscoverage['rets.js'][682] = 0;
  _$jscoverage['rets.js'][683] = 0;
  _$jscoverage['rets.js'][687] = 0;
  _$jscoverage['rets.js'][688] = 0;
  _$jscoverage['rets.js'][689] = 0;
  _$jscoverage['rets.js'][692] = 0;
  _$jscoverage['rets.js'][695] = 0;
  _$jscoverage['rets.js'][696] = 0;
  _$jscoverage['rets.js'][697] = 0;
  _$jscoverage['rets.js'][698] = 0;
  _$jscoverage['rets.js'][699] = 0;
  _$jscoverage['rets.js'][702] = 0;
  _$jscoverage['rets.js'][703] = 0;
  _$jscoverage['rets.js'][704] = 0;
  _$jscoverage['rets.js'][708] = 0;
  _$jscoverage['rets.js'][709] = 0;
  _$jscoverage['rets.js'][710] = 0;
  _$jscoverage['rets.js'][713] = 0;
  _$jscoverage['rets.js'][714] = 0;
  _$jscoverage['rets.js'][715] = 0;
  _$jscoverage['rets.js'][718] = 0;
  _$jscoverage['rets.js'][719] = 0;
  _$jscoverage['rets.js'][720] = 0;
  _$jscoverage['rets.js'][723] = 0;
  _$jscoverage['rets.js'][724] = 0;
  _$jscoverage['rets.js'][725] = 0;
  _$jscoverage['rets.js'][728] = 0;
  _$jscoverage['rets.js'][729] = 0;
  _$jscoverage['rets.js'][730] = 0;
  _$jscoverage['rets.js'][733] = 0;
  _$jscoverage['rets.js'][734] = 0;
  _$jscoverage['rets.js'][735] = 0;
  _$jscoverage['rets.js'][738] = 0;
  _$jscoverage['rets.js'][739] = 0;
  _$jscoverage['rets.js'][765] = 0;
  _$jscoverage['rets.js'][768] = 0;
  _$jscoverage['rets.js'][770] = 0;
  _$jscoverage['rets.js'][778] = 0;
  _$jscoverage['rets.js'][779] = 0;
  _$jscoverage['rets.js'][781] = 0;
  _$jscoverage['rets.js'][783] = 0;
  _$jscoverage['rets.js'][784] = 0;
  _$jscoverage['rets.js'][785] = 0;
  _$jscoverage['rets.js'][788] = 0;
  _$jscoverage['rets.js'][789] = 0;
  _$jscoverage['rets.js'][792] = 0;
  _$jscoverage['rets.js'][793] = 0;
  _$jscoverage['rets.js'][797] = 0;
  _$jscoverage['rets.js'][803] = 0;
  _$jscoverage['rets.js'][804] = 0;
  _$jscoverage['rets.js'][809] = 0;
  _$jscoverage['rets.js'][810] = 0;
  _$jscoverage['rets.js'][814] = 0;
  _$jscoverage['rets.js'][815] = 0;
  _$jscoverage['rets.js'][819] = 0;
  _$jscoverage['rets.js'][820] = 0;
  _$jscoverage['rets.js'][821] = 0;
  _$jscoverage['rets.js'][822] = 0;
  _$jscoverage['rets.js'][824] = 0;
  _$jscoverage['rets.js'][835] = 0;
  _$jscoverage['rets.js'][836] = 0;
  _$jscoverage['rets.js'][841] = 0;
  _$jscoverage['rets.js'][842] = 0;
  _$jscoverage['rets.js'][847] = 0;
  _$jscoverage['rets.js'][848] = 0;
  _$jscoverage['rets.js'][852] = 0;
  _$jscoverage['rets.js'][853] = 0;
  _$jscoverage['rets.js'][854] = 0;
  _$jscoverage['rets.js'][855] = 0;
  _$jscoverage['rets.js'][856] = 0;
  _$jscoverage['rets.js'][857] = 0;
  _$jscoverage['rets.js'][858] = 0;
  _$jscoverage['rets.js'][862] = 0;
  _$jscoverage['rets.js'][868] = 0;
  _$jscoverage['rets.js'][869] = 0;
  _$jscoverage['rets.js'][871] = 0;
  _$jscoverage['rets.js'][876] = 0;
  _$jscoverage['rets.js'][878] = 0;
  _$jscoverage['rets.js'][883] = 0;
  _$jscoverage['rets.js'][886] = 0;
  _$jscoverage['rets.js'][887] = 0;
  _$jscoverage['rets.js'][890] = 0;
  _$jscoverage['rets.js'][891] = 0;
  _$jscoverage['rets.js'][892] = 0;
  _$jscoverage['rets.js'][894] = 0;
  _$jscoverage['rets.js'][899] = 0;
  _$jscoverage['rets.js'][904] = 0;
  _$jscoverage['rets.js'][907] = 0;
  _$jscoverage['rets.js'][908] = 0;
  _$jscoverage['rets.js'][909] = 0;
  _$jscoverage['rets.js'][912] = 0;
  _$jscoverage['rets.js'][913] = 0;
  _$jscoverage['rets.js'][917] = 0;
  _$jscoverage['rets.js'][920] = 0;
  _$jscoverage['rets.js'][921] = 0;
  _$jscoverage['rets.js'][922] = 0;
  _$jscoverage['rets.js'][925] = 0;
  _$jscoverage['rets.js'][926] = 0;
  _$jscoverage['rets.js'][930] = 0;
  _$jscoverage['rets.js'][933] = 0;
  _$jscoverage['rets.js'][934] = 0;
  _$jscoverage['rets.js'][935] = 0;
  _$jscoverage['rets.js'][938] = 0;
  _$jscoverage['rets.js'][939] = 0;
  _$jscoverage['rets.js'][943] = 0;
  _$jscoverage['rets.js'][947] = 0;
  _$jscoverage['rets.js'][952] = 0;
  _$jscoverage['rets.js'][953] = 0;
  _$jscoverage['rets.js'][954] = 0;
  _$jscoverage['rets.js'][957] = 0;
  _$jscoverage['rets.js'][960] = 0;
  _$jscoverage['rets.js'][961] = 0;
  _$jscoverage['rets.js'][967] = 0;
  _$jscoverage['rets.js'][981] = 0;
  _$jscoverage['rets.js'][983] = 0;
  _$jscoverage['rets.js'][984] = 0;
  _$jscoverage['rets.js'][985] = 0;
  _$jscoverage['rets.js'][987] = 0;
  _$jscoverage['rets.js'][989] = 0;
  _$jscoverage['rets.js'][994] = 0;
  _$jscoverage['rets.js'][1001] = 0;
  _$jscoverage['rets.js'][1002] = 0;
  _$jscoverage['rets.js'][1003] = 0;
  _$jscoverage['rets.js'][1008] = 0;
  _$jscoverage['rets.js'][1010] = 0;
  _$jscoverage['rets.js'][1013] = 0;
  _$jscoverage['rets.js'][1014] = 0;
  _$jscoverage['rets.js'][1015] = 0;
  _$jscoverage['rets.js'][1022] = 0;
  _$jscoverage['rets.js'][1040] = 0;
  _$jscoverage['rets.js'][1042] = 0;
  _$jscoverage['rets.js'][1045] = 0;
  _$jscoverage['rets.js'][1046] = 0;
  _$jscoverage['rets.js'][1050] = 0;
  _$jscoverage['rets.js'][1051] = 0;
  _$jscoverage['rets.js'][1055] = 0;
  _$jscoverage['rets.js'][1056] = 0;
  _$jscoverage['rets.js'][1058] = 0;
  _$jscoverage['rets.js'][1060] = 0;
  _$jscoverage['rets.js'][1063] = 0;
  _$jscoverage['rets.js'][1065] = 0;
  _$jscoverage['rets.js'][1073] = 0;
  _$jscoverage['rets.js'][1074] = 0;
  _$jscoverage['rets.js'][1078] = 0;
  _$jscoverage['rets.js'][1079] = 0;
  _$jscoverage['rets.js'][1083] = 0;
  _$jscoverage['rets.js'][1084] = 0;
  _$jscoverage['rets.js'][1088] = 0;
  _$jscoverage['rets.js'][1089] = 0;
  _$jscoverage['rets.js'][1092] = 0;
  _$jscoverage['rets.js'][1105] = 0;
  _$jscoverage['rets.js'][1128] = 0;
  _$jscoverage['rets.js'][1129] = 0;
  _$jscoverage['rets.js'][1144] = 0;
  _$jscoverage['rets.js'][1145] = 0;
}
_$jscoverage['rets.js'].source = ["<span class=\"c\">/**</span>","<span class=\"c\"> * RETS Client</span>","<span class=\"c\"> * -----------</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * Event Types</span>","<span class=\"c\"> * ===========</span>","<span class=\"c\"> * - digest.error</span>","<span class=\"c\"> * - connection: General connection event - could mean success or error.</span>","<span class=\"c\"> * - connection.success: Successful connection only</span>","<span class=\"c\"> * - connection.error: General connection error.</span>","<span class=\"c\"> * - connection.parse.error: General connection parsing error.</span>","<span class=\"c\"> * - connection.closed: Digest authentication connection closed.</span>","<span class=\"c\"> * - request.error: General request error.</span>","<span class=\"c\"> * - request.parse.error: Request successful, but parsing failed.</span>","<span class=\"c\"> * - request.{TYPE}.complete: Request complete.</span>","<span class=\"c\"> * - get_meta.complete: Meta loaded</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * Response Headers</span>","<span class=\"c\"> * ================</span>","<span class=\"c\"> * * www-authenticate</span>","<span class=\"c\"> * * cache-control</span>","<span class=\"c\"> * * rets-server</span>","<span class=\"c\"> * * server</span>","<span class=\"c\"> * * transfer-encoding</span>","<span class=\"c\"> * * set-cookie</span>","<span class=\"c\"> * * rets-version</span>","<span class=\"c\"> * * content-type</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * ### Response Types</span>","<span class=\"c\"> * classes -</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @constructor</span>","<span class=\"c\"> * @version 1.1.0</span>","<span class=\"c\"> * @module RETS</span>","<span class=\"c\"> * @param settings</span>","<span class=\"c\"> * @param callback</span>","<span class=\"c\"> * @returns {*}</span>","<span class=\"c\"> * @constructor</span>","<span class=\"c\"> */</span>","<span class=\"k\">var</span> stream <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'stream'</span><span class=\"k\">);</span>","<span class=\"k\">var</span> util <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'util'</span><span class=\"k\">);</span>","","util<span class=\"k\">.</span>inherits<span class=\"k\">(</span> RETSResponse<span class=\"k\">,</span> stream<span class=\"k\">.</span>Transform <span class=\"k\">);</span>","<span class=\"k\">function</span> RETSResponse<span class=\"k\">()</span> <span class=\"k\">{</span>","","  <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">!(</span> <span class=\"k\">this</span> <span class=\"k\">instanceof</span> RETSResponse <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">new</span> RETSResponse<span class=\"k\">();</span>","  <span class=\"k\">}</span>","","  stream<span class=\"k\">.</span>Transform<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","","  <span class=\"k\">this</span><span class=\"k\">.</span>_transform <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>chunk<span class=\"k\">,</span> encoding<span class=\"k\">,</span> _callback<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"c\">// if (this._readableState.pipesCount &gt; 0)</span>","    <span class=\"c\">// console.log(chunk.toString('utf8'))</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>push<span class=\"k\">(</span>chunk<span class=\"k\">);</span>","    _callback<span class=\"k\">();</span>","  <span class=\"k\">}</span>","","  <span class=\"k\">this</span><span class=\"k\">.</span>_flush <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>_callback<span class=\"k\">)</span> <span class=\"k\">{</span>","    RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span><span class=\"s\">'Flushing RETS Response'</span><span class=\"k\">)</span>","    _callback<span class=\"k\">();</span>","  <span class=\"k\">}</span>","","<span class=\"k\">}</span>","","util<span class=\"k\">.</span>inherits<span class=\"k\">(</span> RETS<span class=\"k\">,</span> stream<span class=\"k\">.</span>Transform <span class=\"k\">);</span>","<span class=\"k\">function</span> RETS<span class=\"k\">(</span> settings<span class=\"k\">,</span> callback <span class=\"k\">)</span> <span class=\"k\">{</span>","","  <span class=\"c\">// Make sure context is correct otherwise we could screw up the global scope.</span>","  <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">!(</span> <span class=\"k\">this</span> <span class=\"k\">instanceof</span> RETS <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">new</span> RETS<span class=\"k\">(</span> settings<span class=\"k\">,</span> callback <span class=\"k\">);</span>","  <span class=\"k\">}</span>","","  <span class=\"k\">this</span><span class=\"k\">.</span>_curl <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"k\">this</span><span class=\"k\">.</span>utility<span class=\"k\">.</span>libcurl<span class=\"k\">();</span>","","  <span class=\"c\">// Mixin Settings and ObjectEmitter.</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>utility<span class=\"k\">.</span>Setting<span class=\"k\">(</span> <span class=\"k\">this</span> <span class=\"k\">);</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>utility<span class=\"k\">.</span>Emitter<span class=\"k\">(</span> <span class=\"k\">this</span> <span class=\"k\">);</span>","  stream<span class=\"k\">.</span>Transform<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","","  <span class=\"c\">// Primary and Default Settings.</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'settings'</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>utility<span class=\"k\">.</span>defaults<span class=\"k\">(</span> settings<span class=\"k\">,</span> <span class=\"k\">{</span>","    protocol<span class=\"k\">:</span> process<span class=\"k\">.</span>env<span class=\"k\">.</span>RETS_PROTOCOL <span class=\"k\">||</span> <span class=\"s\">'http:'</span><span class=\"k\">,</span>","    host<span class=\"k\">:</span> process<span class=\"k\">.</span>env<span class=\"k\">.</span>RETS_HOST<span class=\"k\">,</span>","    path<span class=\"k\">:</span> process<span class=\"k\">.</span>env<span class=\"k\">.</span>RETS_PATH<span class=\"k\">,</span>","    user<span class=\"k\">:</span> process<span class=\"k\">.</span>env<span class=\"k\">.</span>RETS_USER<span class=\"k\">,</span>","    pass<span class=\"k\">:</span> process<span class=\"k\">.</span>env<span class=\"k\">.</span>RETS_PASS<span class=\"k\">,</span>","    port<span class=\"k\">:</span> process<span class=\"k\">.</span>env<span class=\"k\">.</span>RETS_PORT <span class=\"k\">||</span> <span class=\"s\">80</span><span class=\"k\">,</span>","    version<span class=\"k\">:</span> process<span class=\"k\">.</span>env<span class=\"k\">.</span>RETS_VERSION <span class=\"k\">||</span> <span class=\"s\">'1.7'</span><span class=\"k\">,</span>","    agent<span class=\"k\">:</span> <span class=\"k\">{</span>","      user<span class=\"k\">:</span> process<span class=\"k\">.</span>env<span class=\"k\">.</span>RETS_AGENT <span class=\"k\">||</span> <span class=\"s\">'RETS-Node-Client/1.0'</span><span class=\"k\">,</span>","      password<span class=\"k\">:</span> process<span class=\"k\">.</span>env<span class=\"k\">.</span>RETS_AGENT_PASSWORD","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">));</span>","","  <span class=\"c\">// Authorization Variables.</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'authorization'</span><span class=\"k\">,</span> <span class=\"k\">{</span>","    request<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","    version<span class=\"k\">:</span> <span class=\"k\">[</span> <span class=\"s\">'RETS'</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.version'</span> <span class=\"k\">)</span> <span class=\"k\">].</span>join<span class=\"k\">(</span> <span class=\"s\">'/'</span> <span class=\"k\">),</span>","    cookiefile<span class=\"k\">:</span> <span class=\"s\">'/tmp/'</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.host'</span> <span class=\"k\">)</span> <span class=\"k\">+</span><span class=\"s\">'-'</span><span class=\"k\">+</span> <span class=\"k\">(</span>Math<span class=\"k\">.</span>floor<span class=\"k\">(((</span>Math<span class=\"k\">.</span>random<span class=\"k\">()</span> <span class=\"k\">*</span> <span class=\"s\">1000</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">*</span> <span class=\"s\">1337</span><span class=\"k\">))</span> <span class=\"k\">+</span><span class=\"s\">'.txt'</span>","  <span class=\"k\">}</span><span class=\"k\">);</span>","","  <span class=\"c\">// Capabilities.</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'capabilities'</span><span class=\"k\">,</span> <span class=\"k\">{</span>","    <span class=\"c\">//Action: undefined,</span>","    <span class=\"c\">//LoginComplete: undefined,</span>","    <span class=\"c\">// GetPayloadList: undefined</span>","    ChangePassword<span class=\"k\">:</span> undefined<span class=\"k\">,</span>","    GetObject<span class=\"k\">:</span> undefined<span class=\"k\">,</span>","    Login<span class=\"k\">:</span> undefined<span class=\"k\">,</span>","    Logout<span class=\"k\">:</span> undefined<span class=\"k\">,</span>","    Search<span class=\"k\">:</span> undefined<span class=\"k\">,</span>","    GetMetadata<span class=\"k\">:</span> undefined<span class=\"k\">,</span>","    ServerInformation<span class=\"k\">:</span> undefined","    <span class=\"c\">//Update: undefined</span>","    <span class=\"c\">//PostObject: undefined</span>","  <span class=\"k\">}</span><span class=\"k\">);</span>","","  <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"s\">'function'</span> <span class=\"k\">===</span> <span class=\"k\">typeof</span> callback <span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>once<span class=\"k\">(</span> <span class=\"s\">'connection'</span><span class=\"k\">,</span> callback <span class=\"k\">);</span>","  <span class=\"k\">}</span>","","  <span class=\"k\">this</span><span class=\"k\">.</span>utility<span class=\"k\">.</span>digest<span class=\"k\">(</span><span class=\"k\">{</span>","    username<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.user'</span> <span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.username'</span> <span class=\"k\">),</span>","    password<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.pass'</span> <span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.password'</span> <span class=\"k\">),</span>","    method<span class=\"k\">:</span> <span class=\"s\">'GET'</span><span class=\"k\">,</span>","    host<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.host'</span> <span class=\"k\">),</span>","    path<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.path'</span> <span class=\"k\">),</span>","    port<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.port'</span> <span class=\"k\">),</span>","    protocol<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.protocol'</span> <span class=\"k\">),</span>","    headers<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>_requestHeaders<span class=\"k\">(),</span>","    agent<span class=\"k\">:</span> <span class=\"k\">{</span>","      user<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.agent.user'</span> <span class=\"k\">)</span> <span class=\"k\">||</span> process<span class=\"k\">.</span>env<span class=\"k\">.</span>RETS_AGENT <span class=\"k\">||</span> <span class=\"s\">'RETS-Node-Client/1.0'</span><span class=\"k\">,</span>","      pass<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.agent.password'</span> <span class=\"k\">)</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    session<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span><span class=\"s\">'authorization.session'</span><span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"s\">''</span><span class=\"k\">,</span>","    cookie<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span><span class=\"s\">'authorization.cookiefile'</span><span class=\"k\">),</span>","    version<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span><span class=\"s\">'authorization.version'</span><span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"k\">[],</span>","    buffer<span class=\"k\">:</span> <span class=\"k\">true</span>","  <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>_authorization<span class=\"k\">.</span>bind<span class=\"k\">(</span> <span class=\"k\">this</span> <span class=\"k\">)</span> <span class=\"k\">).</span>perform<span class=\"k\">();</span>","","  <span class=\"k\">this</span><span class=\"k\">.</span>_transform <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>chunk<span class=\"k\">,</span> encoding<span class=\"k\">,</span> _callback<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"c\">// console.log(chunk.toString('utf8'));</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_readableState<span class=\"k\">.</span>pipesCount <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>push<span class=\"k\">(</span>chunk<span class=\"k\">.</span>toString<span class=\"k\">(</span><span class=\"s\">'utf8'</span><span class=\"k\">)+</span><span class=\"s\">'</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">);</span>","    _callback<span class=\"k\">();</span>","  <span class=\"k\">}</span>","","  <span class=\"k\">this</span><span class=\"k\">.</span>_flush <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>_callback<span class=\"k\">)</span> <span class=\"k\">{</span>","    RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span><span class=\"s\">'Flushing RETS Stream'</span><span class=\"k\">)</span>","    _callback<span class=\"k\">();</span>","  <span class=\"k\">}</span>","","  <span class=\"c\">// Return context.</span>","  <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * RETS Instance Properties.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> */</span>","Object<span class=\"k\">.</span>defineProperties<span class=\"k\">(</span> RETS<span class=\"k\">.</span>prototype<span class=\"k\">,</span> <span class=\"k\">{</span>","  getAllLookupValues<span class=\"k\">:</span> <span class=\"k\">{</span>","    <span class=\"c\">/**</span>","<span class=\"c\">     * Get All Lookup Values for a Resource</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @example</span>","<span class=\"c\">     *</span>","<span class=\"c\">     *      // Get all lookup values for \"Property\" resource and output to console</span>","<span class=\"c\">     *      client.getAllLookupValues( 'Property', console.log );</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @method getAllLookupValues</span>","<span class=\"c\">     * @param resource {String} Resource ID.</span>","<span class=\"c\">     * @param callback {Function} Callback method.</span>","<span class=\"c\">     * @returns this {Object} RETS Client instance.</span>","<span class=\"c\">     */</span>","    value<span class=\"k\">:</span> <span class=\"k\">function</span> getAllLookupValues<span class=\"k\">(</span> resource<span class=\"k\">,</span> callback <span class=\"k\">)</span> <span class=\"k\">{</span>","      RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span> <span class=\"s\">'getAllLookupValues( %s )'</span><span class=\"k\">,</span> resource <span class=\"k\">);</span>","","      <span class=\"c\">// @chainable</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","    <span class=\"k\">}</span><span class=\"k\">,</span>","    enumerable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    configurable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    writable<span class=\"k\">:</span> <span class=\"k\">true</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  getClassifications<span class=\"k\">:</span> <span class=\"k\">{</span>","    <span class=\"c\">/**</span>","<span class=\"c\">     * Get Classification Meta Data</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @async</span>","<span class=\"c\">     * @chainable</span>","<span class=\"c\">     * @method getClassifications</span>","<span class=\"c\">     * @param type {String} Resource type..</span>","<span class=\"c\">     * @param callback {Function} Callback function.</span>","<span class=\"c\">     * @returns {Object} Context</span>","<span class=\"c\">     */</span>","    value<span class=\"k\">:</span> <span class=\"k\">function</span> getClassifications<span class=\"k\">(</span> type<span class=\"k\">,</span> callback <span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>sendRequest<span class=\"k\">(</span> <span class=\"s\">'url.GetMetadata'</span><span class=\"k\">,</span> <span class=\"k\">{</span> Type<span class=\"k\">:</span> <span class=\"s\">'METADATA-CLASS'</span><span class=\"k\">,</span> ID<span class=\"k\">:</span> type <span class=\"k\">||</span> <span class=\"s\">'Property'</span> <span class=\"k\">}</span><span class=\"k\">,</span> callback <span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    enumerable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    configurable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    writable<span class=\"k\">:</span> <span class=\"k\">true</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  getLookupValues<span class=\"k\">:</span> <span class=\"k\">{</span>","    value<span class=\"k\">:</span> <span class=\"k\">function</span> getLookupValues<span class=\"k\">(</span> resource<span class=\"k\">,</span> lookupname<span class=\"k\">)</span> <span class=\"k\">{</span>","      RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span> <span class=\"s\">'getLookupValues'</span> <span class=\"k\">);</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>sendRequest<span class=\"k\">(</span> <span class=\"s\">'url.GetMetadata'</span><span class=\"k\">,</span> <span class=\"k\">{</span> Type<span class=\"k\">:</span> <span class=\"s\">'METADATA-LOOKUP_TYPE'</span><span class=\"k\">,</span> ID<span class=\"k\">:</span> resource <span class=\"k\">+</span> <span class=\"s\">':'</span> <span class=\"k\">+</span> lookupname <span class=\"k\">}</span><span class=\"k\">,</span> callback <span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    enumerable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    configurable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    writable<span class=\"k\">:</span> <span class=\"k\">true</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  getMetadataResources<span class=\"k\">:</span> <span class=\"k\">{</span>","    value<span class=\"k\">:</span> <span class=\"k\">function</span> getMetadataResources<span class=\"k\">(</span> id<span class=\"k\">,</span> callback<span class=\"k\">)</span> <span class=\"k\">{</span>","      RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span> <span class=\"s\">'getMetadataResources'</span> <span class=\"k\">);</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>sendRequest<span class=\"k\">(</span> <span class=\"s\">'url.GetMetadata'</span><span class=\"k\">,</span> <span class=\"k\">{</span> Type<span class=\"k\">:</span> <span class=\"s\">'METADATA-RESOURCE'</span><span class=\"k\">,</span> ID<span class=\"k\">:</span> id <span class=\"k\">||</span> <span class=\"s\">'0'</span> <span class=\"k\">}</span><span class=\"k\">,</span> callback <span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    enumerable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    configurable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    writable<span class=\"k\">:</span> <span class=\"k\">true</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  getMetadataInfo<span class=\"k\">:</span> <span class=\"k\">{</span>","    value<span class=\"k\">:</span> <span class=\"k\">function</span> getMetadataInfo<span class=\"k\">()</span> <span class=\"k\">{</span>","      RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span> <span class=\"s\">'getMetadataInfo'</span> <span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    enumerable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    configurable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    writable<span class=\"k\">:</span> <span class=\"k\">true</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  getObject<span class=\"k\">:</span> <span class=\"k\">{</span>","    value<span class=\"k\">:</span> <span class=\"k\">function</span> getObject<span class=\"k\">(</span> resource<span class=\"k\">,</span> type<span class=\"k\">,</span> id<span class=\"k\">,</span> photoNumber<span class=\"k\">,</span> location<span class=\"k\">,</span> callback <span class=\"k\">)</span> <span class=\"k\">{</span>","      RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span> <span class=\"s\">'getObject'</span> <span class=\"k\">);</span>","      <span class=\"k\">var</span> sendID <span class=\"k\">=</span> id<span class=\"k\">;</span> <span class=\"c\">// todo parse</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>streamRequest<span class=\"k\">(</span> <span class=\"s\">'url.GetObject'</span><span class=\"k\">,</span> <span class=\"k\">{</span> Resource<span class=\"k\">:</span> resource <span class=\"k\">||</span> <span class=\"s\">'Property'</span><span class=\"k\">,</span> Type<span class=\"k\">:</span> type <span class=\"k\">||</span> <span class=\"s\">'PHOTO'</span><span class=\"k\">,</span> ID<span class=\"k\">:</span> sendID<span class=\"k\">,</span> Location<span class=\"k\">:</span> location <span class=\"k\">||</span> <span class=\"s\">0</span> <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    enumerable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    configurable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    writable<span class=\"k\">:</span> <span class=\"k\">true</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  getAllTransactions<span class=\"k\">:</span> <span class=\"k\">{</span>","    value<span class=\"k\">:</span> <span class=\"k\">function</span> GetAllTransactions<span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","    enumerable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    configurable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    writable<span class=\"k\">:</span> <span class=\"k\">true</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  getMetadataObjects<span class=\"k\">:</span> <span class=\"k\">{</span>","    value<span class=\"k\">:</span> <span class=\"k\">function</span> GetMetadataObjects<span class=\"k\">(</span> id<span class=\"k\">,</span> callback <span class=\"k\">)</span> <span class=\"k\">{</span>","      RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span> <span class=\"s\">'getMetadataObjects'</span> <span class=\"k\">);</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>sendRequest<span class=\"k\">(</span> <span class=\"s\">'url.GetMetadata'</span><span class=\"k\">,</span> <span class=\"k\">{</span> Type<span class=\"k\">:</span> <span class=\"s\">'METADATA-OBJECT'</span><span class=\"k\">,</span> ID<span class=\"k\">:</span> id <span class=\"k\">||</span> <span class=\"s\">'Property'</span><span class=\"k\">,</span> Format<span class=\"k\">:</span> <span class=\"s\">'STANDARD-XML'</span> <span class=\"k\">}</span><span class=\"k\">,</span> callback <span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    enumerable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    configurable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    writable<span class=\"k\">:</span> <span class=\"k\">true</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  getMetadataTable<span class=\"k\">:</span> <span class=\"k\">{</span>","    <span class=\"c\">/**</span>","<span class=\"c\">     * Get Metadata Table</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @method getMetadataTable</span>","<span class=\"c\">     * @for RETS</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @param resource</span>","<span class=\"c\">     * @param classification</span>","<span class=\"c\">     * @param callback</span>","<span class=\"c\">     * @returns {*}</span>","<span class=\"c\">     */</span>","    value<span class=\"k\">:</span> <span class=\"k\">function</span> getMetadataTable<span class=\"k\">(</span> resource<span class=\"k\">,</span> classification<span class=\"k\">,</span> callback <span class=\"k\">)</span> <span class=\"k\">{</span>","      RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span> <span class=\"s\">'getMetadataTable( %s, %s )'</span><span class=\"k\">,</span> resource<span class=\"k\">,</span> classification <span class=\"k\">);</span>","","      <span class=\"c\">// @chainable</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>sendRequest<span class=\"k\">(</span> <span class=\"s\">'url.GetMetadata'</span><span class=\"k\">,</span> <span class=\"k\">{</span> Type<span class=\"k\">:</span> <span class=\"s\">'METADATA-TABLE'</span><span class=\"k\">,</span> ID<span class=\"k\">:</span> resource <span class=\"k\">+</span><span class=\"s\">':'</span><span class=\"k\">+</span>classification <span class=\"k\">}</span><span class=\"k\">,</span> callback <span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    enumerable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    configurable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    writable<span class=\"k\">:</span> <span class=\"k\">true</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  getMetadataClasses<span class=\"k\">:</span> <span class=\"k\">{</span>","    <span class=\"c\">/**</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @async</span>","<span class=\"c\">     * @param resource</span>","<span class=\"c\">     * @param callback</span>","<span class=\"c\">     * @returns {*}</span>","<span class=\"c\">     */</span>","    value<span class=\"k\">:</span> <span class=\"k\">function</span> getMetadataClasses<span class=\"k\">(</span> resource<span class=\"k\">,</span> callback <span class=\"k\">)</span> <span class=\"k\">{</span>","      RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span> <span class=\"s\">'getMetadataClasses( %s )'</span><span class=\"k\">,</span> resource <span class=\"k\">);</span>","","      <span class=\"c\">// @chainable</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>sendRequest<span class=\"k\">(</span> <span class=\"s\">'url.GetMetadata'</span><span class=\"k\">,</span> <span class=\"k\">{</span> Type<span class=\"k\">:</span> <span class=\"s\">'METADATA-CLASS'</span><span class=\"k\">,</span> ID<span class=\"k\">:</span> resource <span class=\"k\">||</span> <span class=\"s\">'Property'</span> <span class=\"k\">}</span><span class=\"k\">,</span> callback <span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    enumerable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    configurable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    writable<span class=\"k\">:</span> <span class=\"k\">true</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  searchQuery<span class=\"k\">:</span> <span class=\"k\">{</span>","    <span class=\"c\">/**</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @async</span>","<span class=\"c\">     * @method searchQuery</span>","<span class=\"c\">     * @param resource</span>","<span class=\"c\">     * @param callback</span>","<span class=\"c\">     * @param callback for stream handler</span>","<span class=\"c\">     * @returns {*}</span>","<span class=\"c\">     */</span>","    value<span class=\"k\">:</span> <span class=\"k\">function</span> searchQuery<span class=\"k\">(</span> args<span class=\"k\">,</span> callback<span class=\"k\">,</span> stream <span class=\"k\">)</span> <span class=\"k\">{</span>","      RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span> <span class=\"s\">'searchQuery( %s )'</span><span class=\"k\">,</span> args <span class=\"k\">);</span>","","      <span class=\"k\">if</span> <span class=\"k\">(</span>stream <span class=\"k\">!==</span> <span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>sendRequest<span class=\"k\">(</span> <span class=\"s\">'url.Search'</span><span class=\"k\">,</span> <span class=\"k\">{</span>","          SearchType<span class=\"k\">:</span> args<span class=\"k\">.</span>SearchType <span class=\"k\">||</span> <span class=\"s\">'Property'</span><span class=\"k\">,</span>","          Class<span class=\"k\">:</span> args<span class=\"k\">.</span>Class <span class=\"k\">||</span> <span class=\"s\">'A'</span><span class=\"k\">,</span>","          Query<span class=\"k\">:</span> args<span class=\"k\">.</span>Query <span class=\"k\">||</span> <span class=\"s\">''</span><span class=\"k\">,</span>","          QueryType<span class=\"k\">:</span> args<span class=\"k\">.</span>QueryType <span class=\"k\">||</span> <span class=\"s\">'DMQL2'</span><span class=\"k\">,</span> <span class=\"c\">// 'DMQL'</span>","          Count<span class=\"k\">:</span> <span class=\"k\">(</span>args<span class=\"k\">.</span>Count <span class=\"k\">===</span> <span class=\"k\">false</span> <span class=\"k\">||</span> args<span class=\"k\">.</span>Count <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">?</span> <span class=\"s\">0</span> <span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">,</span>","          Format<span class=\"k\">:</span> args<span class=\"k\">.</span>Format <span class=\"k\">||</span> <span class=\"s\">'STANDARD-XML'</span><span class=\"k\">,</span> <span class=\"c\">// \"COMPACT-DECODED\"</span>","          Limit<span class=\"k\">:</span> args<span class=\"k\">.</span>Limit <span class=\"k\">||</span> <span class=\"s\">99</span><span class=\"k\">,</span>","          StandardNames<span class=\"k\">:</span> args<span class=\"k\">.</span>StandardNames <span class=\"k\">||</span> <span class=\"s\">0</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> callback <span class=\"k\">);</span>","","        <span class=\"c\">// @chainable</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","","        <span class=\"k\">this</span><span class=\"k\">.</span>streamRequest<span class=\"k\">(</span> <span class=\"s\">'url.Search'</span><span class=\"k\">,</span> <span class=\"k\">{</span>","          SearchType<span class=\"k\">:</span> args<span class=\"k\">.</span>SearchType <span class=\"k\">||</span> <span class=\"s\">'Property'</span><span class=\"k\">,</span>","          Class<span class=\"k\">:</span> args<span class=\"k\">.</span>Class <span class=\"k\">||</span> <span class=\"s\">'A'</span><span class=\"k\">,</span>","          Query<span class=\"k\">:</span> args<span class=\"k\">.</span>Query <span class=\"k\">||</span> <span class=\"s\">''</span><span class=\"k\">,</span>","          QueryType<span class=\"k\">:</span> args<span class=\"k\">.</span>QueryType <span class=\"k\">||</span> <span class=\"s\">'DMQL2'</span><span class=\"k\">,</span> <span class=\"c\">// 'DMQL'</span>","          Count<span class=\"k\">:</span> <span class=\"k\">(</span>args<span class=\"k\">.</span>Count <span class=\"k\">===</span> <span class=\"k\">false</span> <span class=\"k\">||</span> args<span class=\"k\">.</span>Count <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">?</span> <span class=\"s\">0</span> <span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">,</span>","          Format<span class=\"k\">:</span> args<span class=\"k\">.</span>Format <span class=\"k\">||</span> <span class=\"s\">'STANDARD-XML'</span><span class=\"k\">,</span> <span class=\"c\">// \"COMPACT-DECODED\"</span>","          Limit<span class=\"k\">:</span> args<span class=\"k\">.</span>Limit <span class=\"k\">||</span> <span class=\"s\">99</span><span class=\"k\">,</span>","          StandardNames<span class=\"k\">:</span> args<span class=\"k\">.</span>StandardNames <span class=\"k\">||</span> <span class=\"s\">0</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        <span class=\"c\">// Need to make this implement stream</span>","        <span class=\"c\">// @chainable</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","","    <span class=\"k\">}</span><span class=\"k\">,</span>","    enumerable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    configurable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    writable<span class=\"k\">:</span> <span class=\"k\">true</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  sendRequest<span class=\"k\">:</span> <span class=\"k\">{</span>","    <span class=\"c\">/**</span>","<span class=\"c\">     * Abstract RETS Query wrapper.</span>","<span class=\"c\">     *</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @async</span>","<span class=\"c\">     * @method sendRequest</span>","<span class=\"c\">     * @param action</span>","<span class=\"c\">     * @param args</span>","<span class=\"c\">     * @param callback</span>","<span class=\"c\">     * @returns {*}</span>","<span class=\"c\">     */</span>","    value<span class=\"k\">:</span> <span class=\"k\">function</span> sendRequest<span class=\"k\">(</span> action<span class=\"k\">,</span> args<span class=\"k\">,</span> callback <span class=\"k\">)</span> <span class=\"k\">{</span>","      RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span> <span class=\"s\">'sendRequest'</span> <span class=\"k\">);</span>","","      <span class=\"k\">var</span> querystring <span class=\"k\">=</span> require<span class=\"k\">(</span> <span class=\"s\">'querystring'</span> <span class=\"k\">);</span>","      <span class=\"k\">var</span> Instance <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","      <span class=\"k\">var</span> _url <span class=\"k\">=</span> <span class=\"k\">[</span> Instance<span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.protocol'</span> <span class=\"k\">),</span> <span class=\"s\">\"//\"</span><span class=\"k\">,</span> Instance<span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.host'</span> <span class=\"k\">),</span> <span class=\"s\">':'</span><span class=\"k\">,</span> Instance<span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.port'</span><span class=\"k\">,</span> <span class=\"s\">80</span> <span class=\"k\">),</span> Instance<span class=\"k\">.</span>get<span class=\"k\">(</span> action <span class=\"k\">),</span> <span class=\"s\">'?'</span><span class=\"k\">,</span> querystring<span class=\"k\">.</span>stringify<span class=\"k\">(</span> args <span class=\"k\">)</span> <span class=\"k\">].</span>join<span class=\"k\">(</span> <span class=\"s\">''</span> <span class=\"k\">);</span>","      <span class=\"c\">// RETS.debug( 'sendRequest::_url', _url );</span>","      ","      <span class=\"c\">// Callback Method.</span>","      callback <span class=\"k\">=</span> <span class=\"s\">'function'</span> <span class=\"k\">===</span> <span class=\"k\">typeof</span> callback <span class=\"k\">?</span> callback <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>utility<span class=\"k\">.</span>noop<span class=\"k\">;</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>utility<span class=\"k\">.</span>digest<span class=\"k\">(</span><span class=\"k\">{</span>","        username<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.user'</span> <span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.username'</span> <span class=\"k\">),</span>","        password<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.pass'</span> <span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.password'</span> <span class=\"k\">),</span>","","        method<span class=\"k\">:</span> <span class=\"s\">'GET'</span><span class=\"k\">,</span>","        host<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.host'</span> <span class=\"k\">),</span>","        protocol<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.protocol'</span> <span class=\"k\">),</span>","        port<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.port'</span> <span class=\"k\">),</span>","        path<span class=\"k\">:</span> <span class=\"k\">[</span> Instance<span class=\"k\">.</span>get<span class=\"k\">(</span> action <span class=\"k\">),</span> querystring<span class=\"k\">.</span>stringify<span class=\"k\">(</span> args <span class=\"k\">)</span> <span class=\"k\">].</span>join<span class=\"k\">(</span> <span class=\"s\">'?'</span> <span class=\"k\">),</span>","        headers<span class=\"k\">:</span> Instance<span class=\"k\">.</span>_requestHeaders<span class=\"k\">(),</span>","","        nc<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'authorization.nc'</span> <span class=\"k\">),</span>","        cnonce<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'authorization.cnonce'</span> <span class=\"k\">),</span>","        realm<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'authorization.realm'</span> <span class=\"k\">),</span>","        qop<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'authorization.qop'</span> <span class=\"k\">),</span>","        opaque<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'authorization.opaque'</span> <span class=\"k\">),</span>","        nonce<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'authorization.nonce'</span> <span class=\"k\">),</span>","","        agent<span class=\"k\">:</span> <span class=\"k\">{</span>","          user<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.agent.user'</span> <span class=\"k\">)</span> <span class=\"k\">||</span> process<span class=\"k\">.</span>env<span class=\"k\">.</span>RETS_AGENT <span class=\"k\">||</span> <span class=\"s\">'RETS-Node-Client/1.0'</span><span class=\"k\">,</span>","          pass<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.agent.password'</span> <span class=\"k\">)</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        cookie<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span><span class=\"s\">'authorization.cookiefile'</span><span class=\"k\">),</span>","        version<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span><span class=\"s\">'authorization.version'</span><span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"s\">''</span><span class=\"k\">,</span>","        buffer<span class=\"k\">:</span> <span class=\"k\">true</span>","","      <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">function</span> haveResponse<span class=\"k\">(</span> error<span class=\"k\">,</span> res<span class=\"k\">,</span> body <span class=\"k\">)</span> <span class=\"k\">{</span>","        RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span> <span class=\"s\">'sendRequest-&gt;haveResponse'</span> <span class=\"k\">);</span>","","        <span class=\"k\">if</span><span class=\"k\">(</span> error <span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">return</span> callback<span class=\"k\">(</span> error<span class=\"k\">,</span> body <span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"c\">// Check Headers for Stuff.</span>","        Instance<span class=\"k\">.</span>_handleHeaders<span class=\"k\">(</span> res<span class=\"k\">.</span>headers <span class=\"k\">);</span>","","        <span class=\"c\">// Parse connection data.</span>","        Instance<span class=\"k\">.</span>_handleBody<span class=\"k\">(</span> body<span class=\"k\">,</span> <span class=\"k\">function</span> bodyParsed<span class=\"k\">(</span> error<span class=\"k\">,</span> data <span class=\"k\">)</span> <span class=\"k\">{</span>","          RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span> <span class=\"s\">'sendRequest-&gt;haveResponse-&gt;bodyParsed'</span> <span class=\"k\">);</span>","","          <span class=\"k\">if</span> <span class=\"k\">(</span>error <span class=\"k\">&amp;&amp;</span> error<span class=\"k\">.</span>code <span class=\"k\">==</span> <span class=\"s\">401</span><span class=\"k\">)</span> <span class=\"k\">return</span><span class=\"k\">;</span>","          <span class=\"k\">if</span><span class=\"k\">(</span> error <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> callback<span class=\"k\">(</span> error<span class=\"k\">,</span> data <span class=\"k\">);</span>","          <span class=\"k\">}</span>","","          <span class=\"c\">// Callback Response.</span>","          <span class=\"k\">return</span> callback<span class=\"k\">(</span> <span class=\"k\">null</span><span class=\"k\">,</span> data <span class=\"k\">);</span>","","        <span class=\"k\">}</span><span class=\"k\">);</span>","","      <span class=\"k\">}</span><span class=\"k\">).</span>perform<span class=\"k\">();</span>","","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    enumerable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    configurable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    writable<span class=\"k\">:</span> <span class=\"k\">true</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  streamRequest<span class=\"k\">:</span> <span class=\"k\">{</span>","    <span class=\"c\">/**</span>","<span class=\"c\">     * Abstract RETS Query wrapper.</span>","<span class=\"c\">     *</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @async</span>","<span class=\"c\">     * @method streamRequest</span>","<span class=\"c\">     * @param action</span>","<span class=\"c\">     * @param args</span>","<span class=\"c\">     * @returns {*}</span>","<span class=\"c\">     */</span>","    value<span class=\"k\">:</span> <span class=\"k\">function</span> streamRequest<span class=\"k\">(</span> action<span class=\"k\">,</span> args <span class=\"k\">)</span> <span class=\"k\">{</span>","      RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span> <span class=\"s\">'streamRequest'</span> <span class=\"k\">);</span>","","      <span class=\"k\">var</span> querystring <span class=\"k\">=</span> require<span class=\"k\">(</span> <span class=\"s\">'querystring'</span> <span class=\"k\">);</span>","      <span class=\"k\">var</span> Instance <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","      <span class=\"k\">var</span> _url <span class=\"k\">=</span> <span class=\"k\">[</span> Instance<span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.protocol'</span> <span class=\"k\">),</span> <span class=\"s\">\"//\"</span><span class=\"k\">,</span> Instance<span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.host'</span> <span class=\"k\">),</span> <span class=\"s\">':'</span><span class=\"k\">,</span> Instance<span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.port'</span><span class=\"k\">,</span> <span class=\"s\">80</span> <span class=\"k\">),</span> Instance<span class=\"k\">.</span>get<span class=\"k\">(</span> action <span class=\"k\">),</span> <span class=\"s\">'?'</span><span class=\"k\">,</span> querystring<span class=\"k\">.</span>stringify<span class=\"k\">(</span> args <span class=\"k\">)</span> <span class=\"k\">].</span>join<span class=\"k\">(</span> <span class=\"s\">''</span> <span class=\"k\">);</span>","      <span class=\"c\">// RETS.debug( 'streamRequest::_url', _url );</span>","      ","      <span class=\"c\">// Callback Method.</span>","      callback <span class=\"k\">=</span> <span class=\"s\">'function'</span> <span class=\"k\">===</span> <span class=\"k\">typeof</span> callback <span class=\"k\">?</span> callback <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>utility<span class=\"k\">.</span>noop<span class=\"k\">;</span>","      streamCallback <span class=\"k\">=</span> <span class=\"s\">'function'</span> <span class=\"k\">===</span> <span class=\"k\">typeof</span> streamCallback <span class=\"k\">?</span> streamCallback <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>utility<span class=\"k\">.</span>noop<span class=\"k\">;</span>","","      <span class=\"k\">var</span> request <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>utility<span class=\"k\">.</span>digest<span class=\"k\">(</span><span class=\"k\">{</span>","        username<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.user'</span> <span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.username'</span> <span class=\"k\">),</span>","        password<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.pass'</span> <span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.password'</span> <span class=\"k\">),</span>","","        method<span class=\"k\">:</span> <span class=\"s\">'GET'</span><span class=\"k\">,</span>","        host<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.host'</span> <span class=\"k\">),</span>","        protocol<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.protocol'</span> <span class=\"k\">),</span>","        port<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.port'</span> <span class=\"k\">),</span>","        path<span class=\"k\">:</span> <span class=\"k\">[</span> Instance<span class=\"k\">.</span>get<span class=\"k\">(</span> action <span class=\"k\">),</span> querystring<span class=\"k\">.</span>stringify<span class=\"k\">(</span> args <span class=\"k\">)</span> <span class=\"k\">].</span>join<span class=\"k\">(</span> <span class=\"s\">'?'</span> <span class=\"k\">),</span>","        headers<span class=\"k\">:</span> Instance<span class=\"k\">.</span>_requestHeaders<span class=\"k\">(),</span>","","        nc<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'authorization.nc'</span> <span class=\"k\">),</span>","        cnonce<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'authorization.cnonce'</span> <span class=\"k\">),</span>","        realm<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'authorization.realm'</span> <span class=\"k\">),</span>","        qop<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'authorization.qop'</span> <span class=\"k\">),</span>","        opaque<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'authorization.opaque'</span> <span class=\"k\">),</span>","        nonce<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'authorization.nonce'</span> <span class=\"k\">),</span>","","        agent<span class=\"k\">:</span> <span class=\"k\">{</span>","          user<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.agent.user'</span> <span class=\"k\">)</span> <span class=\"k\">||</span> process<span class=\"k\">.</span>env<span class=\"k\">.</span>RETS_AGENT <span class=\"k\">||</span> <span class=\"s\">'RETS-Node-Client/1.0'</span><span class=\"k\">,</span>","          pass<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.agent.password'</span> <span class=\"k\">)</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        cookie<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span><span class=\"s\">'authorization.cookiefile'</span><span class=\"k\">),</span>","        version<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span><span class=\"s\">'authorization.version'</span><span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"s\">''</span><span class=\"k\">,</span>","        buffer<span class=\"k\">:</span> <span class=\"k\">false</span>","","      <span class=\"k\">}</span><span class=\"k\">);</span>","","      <span class=\"k\">var</span> headers <span class=\"k\">=</span> <span class=\"k\">[];</span>","      <span class=\"k\">var</span> response <span class=\"k\">=</span> <span class=\"k\">new</span> RETSResponse<span class=\"k\">();</span>","","      request<span class=\"k\">.</span>on<span class=\"k\">(</span><span class=\"s\">'data'</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>chunk<span class=\"k\">)</span> <span class=\"k\">{</span>","        response<span class=\"k\">.</span>write<span class=\"k\">(</span>chunk<span class=\"k\">);</span>","        <span class=\"k\">return</span> chunk<span class=\"k\">.</span>length<span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">);</span>","","      request<span class=\"k\">.</span>on<span class=\"k\">(</span><span class=\"s\">'header'</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>chunk<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> h <span class=\"k\">=</span> chunk<span class=\"k\">.</span>toString<span class=\"k\">().</span>split<span class=\"k\">(</span><span class=\"s\">':'</span><span class=\"k\">);</span>","        headers<span class=\"k\">[</span>h<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]]</span> <span class=\"k\">=</span> h<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">];</span>","","        <span class=\"k\">return</span> chunk<span class=\"k\">.</span>length<span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">);</span>","","      <span class=\"c\">// curl.close() should be called in event 'error' and 'end' if the curl won't use any more.</span>","      <span class=\"c\">// or the resource will not release until V8 garbage mark sweep.</span>","      request<span class=\"k\">.</span>on<span class=\"k\">(</span><span class=\"s\">'error'</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","          RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span><span class=\"s\">\"error: \"</span> <span class=\"k\">+</span> e<span class=\"k\">.</span>message<span class=\"k\">);</span>","          request<span class=\"k\">.</span>close<span class=\"k\">();</span>","      <span class=\"k\">}</span><span class=\"k\">);</span>","","      request<span class=\"k\">.</span>on<span class=\"k\">(</span><span class=\"s\">'end'</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","          response<span class=\"k\">.</span>end<span class=\"k\">();</span>","","          <span class=\"k\">if</span> <span class=\"k\">(</span>request<span class=\"k\">.</span>getinfo<span class=\"k\">(</span><span class=\"s\">'RESPONSE_CODE'</span><span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">200</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span> <span class=\"s\">'Error: '</span><span class=\"k\">,</span> request<span class=\"k\">.</span>getinfo<span class=\"k\">(</span><span class=\"s\">'RESPONSE_CODE'</span><span class=\"k\">),</span> headers<span class=\"k\">);</span>","          <span class=\"k\">}</span>","      <span class=\"k\">}</span><span class=\"k\">);</span>","","      <span class=\"k\">if</span> <span class=\"k\">(</span>action <span class=\"k\">==</span> <span class=\"s\">'url.GetObject'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span><span class=\"s\">'GetObject action: return response stream'</span><span class=\"k\">);</span>","","        request<span class=\"k\">.</span>perform<span class=\"k\">();</span>","        <span class=\"k\">return</span> response<span class=\"k\">;</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">var</span> xml <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"k\">this</span><span class=\"k\">.</span>utility<span class=\"k\">.</span>XmlStream<span class=\"k\">(</span>response<span class=\"k\">);</span>","","      xml<span class=\"k\">.</span>preserve<span class=\"k\">(</span><span class=\"s\">'COLUMNS'</span><span class=\"k\">,</span><span class=\"k\">true</span><span class=\"k\">);</span>","      xml<span class=\"k\">.</span>on<span class=\"k\">(</span><span class=\"s\">'endElement: COLUMNS'</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>row<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"c\">// _rs.write('Row');</span>","        Instance<span class=\"k\">.</span>write<span class=\"k\">(</span>row<span class=\"k\">.</span>$text<span class=\"k\">.</span>toString<span class=\"k\">(</span><span class=\"s\">'utf8'</span><span class=\"k\">));</span>","        <span class=\"c\">// console.log(row.$children.toString());</span>","      <span class=\"k\">}</span><span class=\"k\">);</span>","      xml<span class=\"k\">.</span>preserve<span class=\"k\">(</span><span class=\"s\">'COUNT'</span><span class=\"k\">,</span><span class=\"k\">true</span><span class=\"k\">);</span>","      xml<span class=\"k\">.</span>on<span class=\"k\">(</span><span class=\"s\">'endElement: COUNT'</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>row<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"c\">// _rs.write('Row');</span>","        RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span><span class=\"s\">'Query has %s results, we are fetching a max of %s records'</span><span class=\"k\">,</span> row<span class=\"k\">.</span>$<span class=\"k\">.</span>Records<span class=\"k\">,</span> args<span class=\"k\">.</span>Limit<span class=\"k\">);</span>","        <span class=\"c\">// console.log(row.$children.toString());</span>","      <span class=\"k\">}</span><span class=\"k\">);</span>","      xml<span class=\"k\">.</span>preserve<span class=\"k\">(</span><span class=\"s\">'MAXROWS'</span><span class=\"k\">,</span><span class=\"k\">true</span><span class=\"k\">);</span>","      xml<span class=\"k\">.</span>on<span class=\"k\">(</span><span class=\"s\">'endElement: MAXROWS'</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>row<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"c\">// _rs.write('Row');</span>","        <span class=\"c\">// RETS.debug('Server allows fetching a max of %s records', row);</span>","        <span class=\"c\">// console.log(row.$children.toString());</span>","      <span class=\"k\">}</span><span class=\"k\">);</span>","      <span class=\"c\">// xml.preserve('DELIMITER',true);</span>","      <span class=\"k\">var</span> rows <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","      xml<span class=\"k\">.</span>preserve<span class=\"k\">(</span><span class=\"s\">'DATA'</span><span class=\"k\">,</span><span class=\"k\">true</span><span class=\"k\">);</span>","      xml<span class=\"k\">.</span>on<span class=\"k\">(</span><span class=\"s\">'endElement: DATA'</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>row<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"c\">// _rs.write('Row');</span>","        rows<span class=\"k\">++;</span>","        <span class=\"k\">var</span> record <span class=\"k\">=</span> row<span class=\"k\">.</span>$text<span class=\"k\">.</span>toString<span class=\"k\">(</span><span class=\"s\">'utf8'</span><span class=\"k\">).</span>replace<span class=\"k\">(</span><span class=\"s\">/(\\r\\n|\\n|\\r)/gm</span><span class=\"k\">,</span><span class=\"s\">\" \"</span><span class=\"k\">);</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>record<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">'</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">)</span> <span class=\"k\">&gt;</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span> console<span class=\"k\">.</span>log<span class=\"k\">(</span><span class=\"s\">'Newline'</span><span class=\"k\">,</span>record<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">'</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">));</span>","        Instance<span class=\"k\">.</span>write<span class=\"k\">(</span>record<span class=\"k\">);</span>","        <span class=\"c\">// console.log(rows++, row.$children.toString().trim().split('\\t').length);</span>","      <span class=\"k\">}</span><span class=\"k\">);</span>","","      xml<span class=\"k\">.</span>on<span class=\"k\">(</span><span class=\"s\">'end'</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","          RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span><span class=\"s\">'Streamed %s records'</span><span class=\"k\">,</span> rows<span class=\"k\">);</span>","          Instance<span class=\"k\">.</span>emit<span class=\"k\">(</span><span class=\"s\">'finish'</span><span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">);</span>","","      request<span class=\"k\">.</span>perform<span class=\"k\">();</span>","","      <span class=\"k\">return</span> request<span class=\"k\">;</span>","","    <span class=\"k\">}</span><span class=\"k\">,</span>","    enumerable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    configurable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    writable<span class=\"k\">:</span> <span class=\"k\">true</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  utility<span class=\"k\">:</span> <span class=\"k\">{</span>","    value<span class=\"k\">:</span> require<span class=\"k\">(</span> <span class=\"s\">'./utility'</span> <span class=\"k\">),</span>","    enumerable<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","    configurable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    writable<span class=\"k\">:</span> <span class=\"k\">true</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  _authorization<span class=\"k\">:</span> <span class=\"k\">{</span>","    <span class=\"c\">/**</span>","<span class=\"c\">     * Authentication Handler</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @todo Make sure set-cookie is returned as an array.</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @param error</span>","<span class=\"c\">     * @param res</span>","<span class=\"c\">     * @param data</span>","<span class=\"c\">     * @constructor</span>","<span class=\"c\">     */</span>","    value<span class=\"k\">:</span> <span class=\"k\">function</span> _authorization<span class=\"k\">(</span> error<span class=\"k\">,</span> res<span class=\"k\">,</span> data <span class=\"k\">)</span> <span class=\"k\">{</span>","      RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span> <span class=\"s\">'_authorization'</span><span class=\"k\">);</span>","","      <span class=\"k\">var</span> Instance <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","      <span class=\"c\">// Connection failure.</span>","      <span class=\"k\">if</span><span class=\"k\">(</span> error <span class=\"k\">)</span> <span class=\"k\">{</span>","        RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span> <span class=\"s\">'_authorization::error'</span><span class=\"k\">,</span> error  <span class=\"k\">);</span>","        <span class=\"k\">return</span> Instance<span class=\"k\">.</span>emit<span class=\"k\">(</span> <span class=\"s\">'connection'</span><span class=\"k\">,</span> error<span class=\"k\">,</span> Instance <span class=\"k\">).</span>emit<span class=\"k\">(</span> <span class=\"s\">'connection.error'</span><span class=\"k\">,</span> error<span class=\"k\">,</span> Instance <span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      <span class=\"c\">// Instance._handleDigest( res.digest );</span>","","      Instance<span class=\"k\">.</span>_handleHeaders<span class=\"k\">(</span> res<span class=\"k\">.</span>headers <span class=\"k\">);</span>","","      <span class=\"c\">// Parse connection data.</span>","      Instance<span class=\"k\">.</span>_handleBody<span class=\"k\">(</span> data<span class=\"k\">,</span> <span class=\"k\">function</span> parsed<span class=\"k\">(</span> error<span class=\"k\">,</span> data <span class=\"k\">)</span> <span class=\"k\">{</span>","        RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span> <span class=\"s\">'_authorization::end-&gt;parsed'</span><span class=\"k\">,</span> error<span class=\"k\">,</span> <span class=\"k\">typeof</span> data <span class=\"k\">);</span>","","        <span class=\"c\">// Parse Error of connection data.</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> error <span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">return</span> Instance<span class=\"k\">.</span>emit<span class=\"k\">(</span> <span class=\"s\">'connection.parse.error'</span><span class=\"k\">,</span> error<span class=\"k\">,</span> data <span class=\"k\">).</span>emit<span class=\"k\">(</span> <span class=\"s\">'connection'</span><span class=\"k\">,</span> error<span class=\"k\">,</span> data <span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"c\">// Connection response code must be 0.</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> data<span class=\"k\">.</span>code <span class=\"k\">!==</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">return</span> Instance<span class=\"k\">.</span>emit<span class=\"k\">(</span> <span class=\"s\">'connection.error'</span><span class=\"k\">,</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span> <span class=\"s\">'Connection response code not the expected 0.'</span> <span class=\"k\">),</span> data <span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"c\">// Save general provider information.</span>","        Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'provider.name'</span><span class=\"k\">,</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>MemberName <span class=\"k\">);</span>","        Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'provider.user'</span><span class=\"k\">,</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>User <span class=\"k\">);</span>","        Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'provider.broker'</span><span class=\"k\">,</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>Broker <span class=\"k\">);</span>","","        <span class=\"c\">// Have Server Information.</span>","        Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'capabilities.ServerInformation'</span><span class=\"k\">,</span> <span class=\"k\">true</span> <span class=\"k\">);</span>","","        <span class=\"c\">// Save meta data.</span>","        Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'meta.version'</span><span class=\"k\">,</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>MetadataVersion <span class=\"k\">);</span>","        Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'meta.min_version'</span><span class=\"k\">,</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>MinMetadataVersion <span class=\"k\">);</span>","        Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'meta.min_timestamp'</span><span class=\"k\">,</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>MinMetadataTimeStamp <span class=\"k\">);</span>","        Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'meta.timestamp'</span><span class=\"k\">,</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>MetadataTimeStamp <span class=\"k\">);</span>","        Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'meta.timeout'</span><span class=\"k\">,</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>TimeoutSeconds <span class=\"k\">);</span>","","        <span class=\"c\">// Save connection URLs.</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>GetObject <span class=\"k\">)</span> <span class=\"k\">{</span>","          Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'url.Login'</span><span class=\"k\">,</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>Login <span class=\"k\">);</span>","          Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'capabilities.Login'</span><span class=\"k\">,</span> <span class=\"k\">true</span> <span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">if</span><span class=\"k\">(</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>ChangePassword <span class=\"k\">)</span> <span class=\"k\">{</span>","          Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'url.ChangePassword'</span><span class=\"k\">,</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>ChangePassword <span class=\"k\">);</span>","          Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'capabilities.ChangePassword'</span><span class=\"k\">,</span> <span class=\"k\">true</span> <span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">if</span><span class=\"k\">(</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>GetObject <span class=\"k\">)</span> <span class=\"k\">{</span>","          Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'url.GetObject'</span><span class=\"k\">,</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>GetObject <span class=\"k\">);</span>","          Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'capabilities.GetObject'</span><span class=\"k\">,</span> <span class=\"k\">true</span> <span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">if</span><span class=\"k\">(</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>GetObject <span class=\"k\">)</span> <span class=\"k\">{</span>","          Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'url.Logout'</span><span class=\"k\">,</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>Logout <span class=\"k\">);</span>","          Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'capabilities.Logout'</span><span class=\"k\">,</span> <span class=\"k\">true</span> <span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">if</span><span class=\"k\">(</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>GetObject <span class=\"k\">)</span> <span class=\"k\">{</span>","          Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'url.Search'</span><span class=\"k\">,</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>Search <span class=\"k\">);</span>","          Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'capabilities.Search'</span><span class=\"k\">,</span> <span class=\"k\">true</span> <span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">if</span><span class=\"k\">(</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>GetObject <span class=\"k\">)</span> <span class=\"k\">{</span>","          Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'url.GetMetadata'</span><span class=\"k\">,</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>GetMetadata <span class=\"k\">);</span>","          Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'capabilities.GetMetadata'</span><span class=\"k\">,</span> <span class=\"k\">true</span> <span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"c\">// Emit connection success.</span>","        Instance<span class=\"k\">.</span>emit<span class=\"k\">(</span> <span class=\"s\">'connection'</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> Instance <span class=\"k\">);</span>","        Instance<span class=\"k\">.</span>emit<span class=\"k\">(</span> <span class=\"s\">'connection.success'</span><span class=\"k\">,</span> Instance <span class=\"k\">);</span>","","      <span class=\"k\">}</span><span class=\"k\">);</span>","","    <span class=\"k\">}</span><span class=\"k\">,</span>","    enumerable<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","    configurable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    writable<span class=\"k\">:</span> <span class=\"k\">true</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  _parseCapabilities<span class=\"k\">:</span> <span class=\"k\">{</span>","    value<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> data<span class=\"k\">,</span> callback <span class=\"k\">)</span> <span class=\"k\">{</span>","      RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span> <span class=\"s\">'_parseCapabilities'</span><span class=\"k\">);</span>","","      <span class=\"k\">var</span> Instance <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","      Instance<span class=\"k\">.</span>_handleBody<span class=\"k\">(</span> data<span class=\"k\">,</span> <span class=\"k\">function</span> parsed<span class=\"k\">(</span> error<span class=\"k\">,</span> data <span class=\"k\">)</span> <span class=\"k\">{</span>","        RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span> <span class=\"s\">'_parseCapabilities::end-&gt;parsed'</span><span class=\"k\">,</span> error<span class=\"k\">,</span> <span class=\"k\">typeof</span> data <span class=\"k\">);</span>","","        <span class=\"c\">// Parse Error of connection data.</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> error <span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">return</span> Instance<span class=\"k\">.</span>emit<span class=\"k\">(</span> <span class=\"s\">'connection.parse.error'</span><span class=\"k\">,</span> error<span class=\"k\">,</span> data <span class=\"k\">).</span>emit<span class=\"k\">(</span> <span class=\"s\">'connection'</span><span class=\"k\">,</span> error<span class=\"k\">,</span> data <span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"c\">// Connection response code must be 0.</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> data<span class=\"k\">.</span>code <span class=\"k\">!==</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">return</span> Instance<span class=\"k\">.</span>emit<span class=\"k\">(</span> <span class=\"s\">'connection.error'</span><span class=\"k\">,</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span> <span class=\"s\">'Connection response code not the expected 0.'</span> <span class=\"k\">),</span> data <span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"c\">// Save general provider information.</span>","        Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'provider.name'</span><span class=\"k\">,</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>MemberName <span class=\"k\">);</span>","        Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'provider.user'</span><span class=\"k\">,</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>User <span class=\"k\">);</span>","        Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'provider.broker'</span><span class=\"k\">,</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>Broker <span class=\"k\">);</span>","","        <span class=\"c\">// Have Server Information.</span>","        Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'capabilities.ServerInformation'</span><span class=\"k\">,</span> <span class=\"k\">true</span> <span class=\"k\">);</span>","","        <span class=\"c\">// Save meta data.</span>","        Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'meta.version'</span><span class=\"k\">,</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>MetadataVersion <span class=\"k\">);</span>","        Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'meta.min_version'</span><span class=\"k\">,</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>MinMetadataVersion <span class=\"k\">);</span>","        Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'meta.min_timestamp'</span><span class=\"k\">,</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>MinMetadataTimeStamp <span class=\"k\">);</span>","        Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'meta.timestamp'</span><span class=\"k\">,</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>MetadataTimeStamp <span class=\"k\">);</span>","        Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'meta.timeout'</span><span class=\"k\">,</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>TimeoutSeconds <span class=\"k\">);</span>","","        <span class=\"c\">// Some servers deliver absolute URLs - we'll make them relative</span>","        <span class=\"k\">var</span> clean_uri <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>uri<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">var</span> uri_root <span class=\"k\">=</span> <span class=\"s\">/http.*\\//i</span><span class=\"k\">;</span>","          <span class=\"k\">return</span> uri<span class=\"k\">.</span>replace<span class=\"k\">(</span>uri_root<span class=\"k\">,</span><span class=\"s\">'/'</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","","        <span class=\"c\">// Save connection URLs.</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>GetObject <span class=\"k\">)</span> <span class=\"k\">{</span>","          Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'url.Login'</span><span class=\"k\">,</span> clean_uri<span class=\"k\">(</span>data<span class=\"k\">.</span>data<span class=\"k\">.</span>Login<span class=\"k\">)</span> <span class=\"k\">);</span>","          Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'capabilities.Login'</span><span class=\"k\">,</span> <span class=\"k\">true</span> <span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">if</span><span class=\"k\">(</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>ChangePassword <span class=\"k\">)</span> <span class=\"k\">{</span>","          Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'url.ChangePassword'</span><span class=\"k\">,</span> clean_uri<span class=\"k\">(</span>data<span class=\"k\">.</span>data<span class=\"k\">.</span>ChangePassword<span class=\"k\">)</span> <span class=\"k\">);</span>","          Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'capabilities.ChangePassword'</span><span class=\"k\">,</span> <span class=\"k\">true</span> <span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">if</span><span class=\"k\">(</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>GetObject <span class=\"k\">)</span> <span class=\"k\">{</span>","          Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'url.GetObject'</span><span class=\"k\">,</span> clean_uri<span class=\"k\">(</span>data<span class=\"k\">.</span>data<span class=\"k\">.</span>GetObject<span class=\"k\">)</span> <span class=\"k\">);</span>","          Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'capabilities.GetObject'</span><span class=\"k\">,</span> <span class=\"k\">true</span> <span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">if</span><span class=\"k\">(</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>GetObject <span class=\"k\">)</span> <span class=\"k\">{</span>","          Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'url.Logout'</span><span class=\"k\">,</span> clean_uri<span class=\"k\">(</span>data<span class=\"k\">.</span>data<span class=\"k\">.</span>Logout<span class=\"k\">)</span> <span class=\"k\">);</span>","          Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'capabilities.Logout'</span><span class=\"k\">,</span> <span class=\"k\">true</span> <span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">if</span><span class=\"k\">(</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>GetObject <span class=\"k\">)</span> <span class=\"k\">{</span>","          Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'url.Search'</span><span class=\"k\">,</span> clean_uri<span class=\"k\">(</span>data<span class=\"k\">.</span>data<span class=\"k\">.</span>Search<span class=\"k\">)</span> <span class=\"k\">);</span>","          Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'capabilities.Search'</span><span class=\"k\">,</span> <span class=\"k\">true</span> <span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">if</span><span class=\"k\">(</span> data<span class=\"k\">.</span>data<span class=\"k\">.</span>GetObject <span class=\"k\">)</span> <span class=\"k\">{</span>","          Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'url.GetMetadata'</span><span class=\"k\">,</span> clean_uri<span class=\"k\">(</span>data<span class=\"k\">.</span>data<span class=\"k\">.</span>GetMetadata<span class=\"k\">)</span> <span class=\"k\">);</span>","          Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'capabilities.GetMetadata'</span><span class=\"k\">,</span> <span class=\"k\">true</span> <span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        process<span class=\"k\">.</span>nextTick<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","          callback<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","      <span class=\"k\">}</span><span class=\"k\">);</span>","","    <span class=\"k\">}</span><span class=\"k\">,</span>","    enumerable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    configurable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    writable<span class=\"k\">:</span> <span class=\"k\">true</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  _handleBody<span class=\"k\">:</span> <span class=\"k\">{</span>","    <span class=\"c\">/**</span>","<span class=\"c\">     * Parse RETS response and return an Object.</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @todo Load text for response codes from static/dada/codes.json</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @async</span>","<span class=\"c\">     * @chainable</span>","<span class=\"c\">     * @method _handleBody</span>","<span class=\"c\">     * @private</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @param data {String} Data string to parse.</span>","<span class=\"c\">     * @param callback {Function} Callback method.</span>","<span class=\"c\">     * @returns {*} Instance.</span>","<span class=\"c\">     */</span>","    value<span class=\"k\">:</span> <span class=\"k\">function</span> _handleBody<span class=\"k\">(</span> body<span class=\"k\">,</span> callback <span class=\"k\">)</span> <span class=\"k\">{</span>","      RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span> <span class=\"s\">'_handleBody'</span> <span class=\"k\">);</span>","","","      <span class=\"k\">var</span> Instance <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","      <span class=\"k\">var</span> parsed <span class=\"k\">=</span> <span class=\"k\">{</span>","        code<span class=\"k\">:</span> undefined<span class=\"k\">,</span>","        text<span class=\"k\">:</span> undefined<span class=\"k\">,</span>","        type<span class=\"k\">:</span> undefined<span class=\"k\">,</span>","        data<span class=\"k\">:</span> <span class=\"k\">{}</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"c\">// Parse XML</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>utility<span class=\"k\">.</span>parseString<span class=\"k\">(</span> body<span class=\"k\">,</span> <span class=\"k\">function</span> xml_parsed<span class=\"k\">(</span> error<span class=\"k\">,</span> data <span class=\"k\">)</span> <span class=\"k\">{</span>","        RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span> <span class=\"s\">'_handleBody-&gt;xml_parsed'</span> <span class=\"k\">);</span>","","        <span class=\"k\">try</span> <span class=\"k\">{</span>","","          <span class=\"k\">if</span><span class=\"k\">(</span> error <span class=\"k\">)</span> <span class=\"k\">{</span>","            RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span> <span class=\"s\">'Error parsing body: '</span><span class=\"k\">,</span> error<span class=\"k\">.</span>message<span class=\"k\">,</span> body <span class=\"k\">);</span>","            <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span> <span class=\"s\">'Response parse error: '</span> <span class=\"k\">+</span> error<span class=\"k\">.</span>message <span class=\"k\">);</span>","          <span class=\"k\">}</span>","","          <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">!</span>data <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span> <span class=\"s\">'No data to parse.'</span> <span class=\"k\">);</span>","          <span class=\"k\">}</span>","","          <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"s\">'object'</span> <span class=\"k\">!==</span> <span class=\"k\">typeof</span> data<span class=\"k\">.</span>RETS <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span> <span class=\"s\">'Response does not contain a proper RETS property. '</span> <span class=\"k\">);</span>","          <span class=\"k\">}</span>","","          <span class=\"c\">// Standard response code and text, response type and empty data container.</span>","          Instance<span class=\"k\">.</span>utility<span class=\"k\">.</span>extend<span class=\"k\">(</span> parsed<span class=\"k\">,</span> <span class=\"k\">{</span>","            code<span class=\"k\">:</span> parseInt<span class=\"k\">(</span> data<span class=\"k\">.</span>RETS<span class=\"k\">[</span> <span class=\"s\">'$'</span> <span class=\"k\">].</span>ReplyCode <span class=\"k\">),</span>","            text<span class=\"k\">:</span> data<span class=\"k\">.</span>RETS<span class=\"k\">[</span> <span class=\"s\">'$'</span> <span class=\"k\">].</span>ReplyText","          <span class=\"k\">}</span><span class=\"k\">);</span>","","          <span class=\"c\">// Error: Authentication required, invalid parameters passed</span>","          <span class=\"k\">if</span><span class=\"k\">(</span> parsed<span class=\"k\">.</span>code <span class=\"k\">===</span> <span class=\"s\">20036</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span> <span class=\"s\">'Missing User-Agent request header field.'</span> <span class=\"k\">);</span>","            <span class=\"c\">// throw new Error( 'Authentication required, invalid parameters passed.' );</span>","          <span class=\"k\">}</span>","","          <span class=\"c\">// Error: User Agent not registered or denied</span>","          <span class=\"k\">if</span><span class=\"k\">(</span> parsed<span class=\"k\">.</span>code <span class=\"k\">===</span> <span class=\"s\">20037</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span> <span class=\"s\">'User Agent not registered or denied.'</span> <span class=\"k\">);</span>","          <span class=\"k\">}</span>","","          <span class=\"c\">// Error: Unknown field</span>","          <span class=\"k\">if</span><span class=\"k\">(</span> parsed<span class=\"k\">.</span>code <span class=\"k\">===</span> <span class=\"s\">20200</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> callback<span class=\"k\">(</span> parsed<span class=\"k\">,</span> <span class=\"k\">null</span> <span class=\"k\">);</span>","          <span class=\"k\">}</span>","","          <span class=\"c\">// No records found.</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>parsed<span class=\"k\">.</span>code <span class=\"k\">===</span> <span class=\"s\">20201</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span>data<span class=\"k\">.</span>RETS<span class=\"k\">.</span>COUNT<span class=\"k\">);</span>","            parsed<span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">'data'</span><span class=\"k\">;</span>","            parsed<span class=\"k\">.</span>data <span class=\"k\">=</span> <span class=\"k\">[];</span>","","            <span class=\"k\">return</span> callback<span class=\"k\">(</span> <span class=\"k\">null</span><span class=\"k\">,</span> parsed <span class=\"k\">);</span>","          <span class=\"k\">}</span>","","          <span class=\"c\">// Error: Miscellaneous search error</span>","          <span class=\"c\">/**</span>","<span class=\"c\">           * This can be a whole bunch of scenarios; like using the wrong fields,</span>","<span class=\"c\">           * not using the right combo of fields, requesting STANDARD-XML when only</span>","<span class=\"c\">           * COMPACT-DECODED is supported, etc.</span>","<span class=\"c\">           *</span>","<span class=\"c\">           * This should probably bubble rather than throw an error</span>","<span class=\"c\">           */</span>","          <span class=\"k\">if</span><span class=\"k\">(</span> parsed<span class=\"k\">.</span>code <span class=\"k\">===</span> <span class=\"s\">20203</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> callback <span class=\"k\">(</span> parsed<span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">);</span>","            <span class=\"c\">// throw new Error( parsed.text );</span>","          <span class=\"k\">}</span>","","          <span class=\"c\">// Error: Invalid query syntax</span>","          <span class=\"k\">if</span><span class=\"k\">(</span> parsed<span class=\"k\">.</span>code <span class=\"k\">===</span> <span class=\"s\">20206</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> callback <span class=\"k\">(</span> parsed<span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">);</span>","            <span class=\"c\">// throw new Error( 'Invalid Query Syntax.' );</span>","          <span class=\"k\">}</span>","","          <span class=\"c\">// Error: Missing User Agent</span>","          <span class=\"k\">if</span><span class=\"k\">(</span> parsed<span class=\"k\">.</span>code <span class=\"k\">===</span> <span class=\"s\">20513</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span> <span class=\"s\">'Miscellaneous Error: Missing required User-Agent request header. See the </span><span class=\"t\">\\'</span><span class=\"s\">Required Client Request Header Fields</span><span class=\"t\">\\'</span><span class=\"s\"> section in the RETS specification.'</span> <span class=\"k\">);</span>","          <span class=\"k\">}</span>","","          <span class=\"c\">// Listings in COMPACT or COMPACT-DECODED</span>","          <span class=\"k\">if</span><span class=\"k\">(</span>data<span class=\"k\">.</span>RETS<span class=\"k\">[</span> <span class=\"s\">'COLUMNS'</span> <span class=\"k\">]</span> <span class=\"k\">&amp;&amp;</span> data<span class=\"k\">.</span>RETS<span class=\"k\">[</span> <span class=\"s\">'DATA'</span> <span class=\"k\">])</span> <span class=\"k\">{</span>","            parsed<span class=\"k\">.</span>count <span class=\"k\">=</span> data<span class=\"k\">.</span>RETS<span class=\"k\">.</span>COUNT<span class=\"k\">[</span> <span class=\"s\">0</span> <span class=\"k\">][</span> <span class=\"s\">'$'</span> <span class=\"k\">].</span>Records<span class=\"k\">;</span>","            parsed<span class=\"k\">.</span>delimiter <span class=\"k\">=</span> data<span class=\"k\">.</span>RETS<span class=\"k\">.</span>DELIMITER<span class=\"k\">[</span> <span class=\"s\">0</span> <span class=\"k\">][</span> <span class=\"s\">'$'</span> <span class=\"k\">].</span>value<span class=\"k\">;</span>","            parsed<span class=\"k\">.</span>columns <span class=\"k\">=</span> data<span class=\"k\">.</span>RETS<span class=\"k\">.</span>COLUMNS<span class=\"k\">.</span>join<span class=\"k\">(</span> <span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">\"</span> <span class=\"k\">);</span>","            parsed<span class=\"k\">.</span>records <span class=\"k\">=</span> data<span class=\"k\">.</span>RETS<span class=\"k\">.</span>DATA<span class=\"k\">.</span>join<span class=\"k\">(</span> <span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">\"</span> <span class=\"k\">);</span>","            parsed<span class=\"k\">.</span>data <span class=\"k\">=</span> <span class=\"k\">[</span> data<span class=\"k\">.</span>RETS<span class=\"k\">.</span>COLUMNS<span class=\"k\">.</span>concat<span class=\"k\">(</span>data<span class=\"k\">.</span>RETS<span class=\"k\">.</span>DATA<span class=\"k\">).</span>join<span class=\"k\">(</span> <span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">\"</span> <span class=\"k\">)</span> <span class=\"k\">];</span> <span class=\"c\">// Merged CSV output</span>","            <span class=\"k\">return</span> callback<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">,</span> parsed<span class=\"k\">);</span>","          <span class=\"k\">}</span>","","          <span class=\"c\">// Listings in STANDARD-XML Format.</span>","          <span class=\"k\">if</span><span class=\"k\">(</span> data<span class=\"k\">.</span>RETS<span class=\"k\">[</span> <span class=\"s\">'REData'</span> <span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">// console.log( require( 'util' ).inspect( data.RETS.COUNT, { showHidden: false, colors: true, depth: 4 } ) )</span>","            <span class=\"c\">// console.log( 'data.RETS.REData', data.RETS.REData[0] );</span>","","            <span class=\"c\">//TODO: handle data for other resources; like agents</span>","","            parsed<span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">'data'</span><span class=\"k\">;</span>","            parsed<span class=\"k\">.</span>data <span class=\"k\">=</span> data<span class=\"k\">.</span>RETS<span class=\"k\">.</span>REData<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>REProperties<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>ResidentialProperty<span class=\"k\">;</span>","","            <span class=\"k\">return</span> callback<span class=\"k\">(</span> <span class=\"k\">null</span><span class=\"k\">,</span> parsed <span class=\"k\">);</span>","","          <span class=\"k\">}</span>","","          <span class=\"c\">// Connection data. @wiki: https://github.com/UsabilityDynamics/node-rets/wiki/Connection-Response</span>","          <span class=\"k\">if</span><span class=\"k\">(</span> data<span class=\"k\">.</span>RETS<span class=\"k\">[</span> <span class=\"s\">'RETS-RESPONSE'</span> <span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","","            parsed<span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">'connection'</span><span class=\"k\">;</span>","","            <span class=\"c\">// Iterate through each line and convert to key and value pair.</span>","            <span class=\"c\">// @note looks like sometimes uses \"\\r\\n,\" and sometimes just \"\\n\"</span>","","            data<span class=\"k\">.</span>RETS<span class=\"k\">[</span> <span class=\"s\">'RETS-RESPONSE'</span> <span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">].</span>split<span class=\"k\">(</span> <span class=\"s\">\"</span><span class=\"t\">\\r\\n</span><span class=\"s\">\"</span> <span class=\"k\">).</span>forEach<span class=\"k\">(</span> <span class=\"k\">function</span> line_parser<span class=\"k\">(</span> line<span class=\"k\">,</span> index <span class=\"k\">)</span> <span class=\"k\">{</span>","","              <span class=\"c\">// Ignore completely blank lines.</span>","              <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">!</span>line <span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span><span class=\"k\">;</span>","              <span class=\"k\">}</span>","","              <span class=\"k\">var</span> split   <span class=\"k\">=</span> line<span class=\"k\">.</span>split<span class=\"k\">(</span> <span class=\"s\">'='</span> <span class=\"k\">);</span>","              <span class=\"k\">var</span> key     <span class=\"k\">=</span>  split<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>replace<span class=\"k\">(</span><span class=\"s\">/^\\s+|\\s+$/g</span><span class=\"k\">,</span> <span class=\"s\">''</span> <span class=\"k\">);</span>","              <span class=\"k\">var</span> value   <span class=\"k\">=</span>  split<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">].</span>replace<span class=\"k\">(</span><span class=\"s\">/^\\s+|\\s+$/g</span><span class=\"k\">,</span> <span class=\"s\">''</span> <span class=\"k\">);</span>","","              parsed<span class=\"k\">.</span>data<span class=\"k\">[</span> key <span class=\"k\">]</span> <span class=\"k\">=</span> value<span class=\"k\">;</span>","","            <span class=\"k\">}</span><span class=\"k\">);</span>","","            <span class=\"c\">// Trigger callback with parsed data.</span>","            <span class=\"k\">return</span> callback<span class=\"k\">(</span> <span class=\"k\">null</span><span class=\"k\">,</span> parsed <span class=\"k\">);</span>","","          <span class=\"k\">}</span>","","          <span class=\"c\">// Some sort of meta.</span>","          <span class=\"k\">if</span><span class=\"k\">(</span> data<span class=\"k\">.</span>RETS<span class=\"k\">[</span> <span class=\"s\">'METADATA'</span> <span class=\"k\">]</span> <span class=\"k\">&amp;&amp;</span> Instance<span class=\"k\">.</span>utility<span class=\"k\">.</span>first<span class=\"k\">(</span> data<span class=\"k\">.</span>RETS<span class=\"k\">[</span> <span class=\"s\">'METADATA'</span> <span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","","            <span class=\"c\">// Classification meta.</span>","            <span class=\"k\">if</span><span class=\"k\">(</span> Instance<span class=\"k\">.</span>utility<span class=\"k\">.</span>first<span class=\"k\">(</span> data<span class=\"k\">.</span>RETS<span class=\"k\">[</span> <span class=\"s\">'METADATA'</span> <span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">][</span> <span class=\"s\">'METADATA-CLASS'</span> <span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","              parsed<span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">'classifications'</span><span class=\"k\">;</span>","              parsed<span class=\"k\">.</span>resource <span class=\"k\">=</span> data<span class=\"k\">.</span>RETS<span class=\"k\">[</span> <span class=\"s\">'METADATA'</span> <span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">][</span> <span class=\"s\">'METADATA-CLASS'</span> <span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">][</span><span class=\"s\">'$'</span><span class=\"k\">].</span>Resource<span class=\"k\">;</span>","","              <span class=\"c\">// Iterate through each class data type and create object</span>","              data<span class=\"k\">.</span>RETS<span class=\"k\">[</span> <span class=\"s\">'METADATA'</span> <span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">][</span> <span class=\"s\">'METADATA-CLASS'</span> <span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">].</span>Class<span class=\"k\">.</span>forEach<span class=\"k\">(</span> <span class=\"k\">function</span> iterate<span class=\"k\">(</span> class_data <span class=\"k\">)</span> <span class=\"k\">{</span>","                parsed<span class=\"k\">.</span>data<span class=\"k\">[</span> class_data<span class=\"k\">.</span>ClassName <span class=\"k\">]</span> <span class=\"k\">=</span> class_data<span class=\"k\">;</span>","              <span class=\"k\">}</span><span class=\"k\">);</span>","","              <span class=\"c\">// Trigger callback with parsed data.</span>","              <span class=\"k\">return</span> callback<span class=\"k\">(</span> <span class=\"k\">null</span><span class=\"k\">,</span> parsed <span class=\"k\">);</span>","","            <span class=\"k\">}</span>","            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> Instance<span class=\"k\">.</span>utility<span class=\"k\">.</span>first<span class=\"k\">(</span> data<span class=\"k\">.</span>RETS<span class=\"k\">[</span> <span class=\"s\">'METADATA'</span> <span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">][</span> <span class=\"s\">'METADATA-RESOURCE'</span> <span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","              parsed<span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">'resources'</span><span class=\"k\">;</span>","              parsed<span class=\"k\">.</span>resource <span class=\"k\">=</span> data<span class=\"k\">.</span>RETS<span class=\"k\">[</span> <span class=\"s\">'METADATA'</span> <span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">][</span> <span class=\"s\">'METADATA-RESOURCE'</span> <span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">][</span><span class=\"s\">'$'</span><span class=\"k\">].</span>Resource<span class=\"k\">;</span>","","              <span class=\"c\">// Iterate through each class data type and create object</span>","              data<span class=\"k\">.</span>RETS<span class=\"k\">[</span> <span class=\"s\">'METADATA'</span> <span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">][</span> <span class=\"s\">'METADATA-RESOURCE'</span> <span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">][</span><span class=\"s\">'Resource'</span><span class=\"k\">].</span>forEach<span class=\"k\">(</span> <span class=\"k\">function</span> iterate<span class=\"k\">(</span> class_data <span class=\"k\">)</span> <span class=\"k\">{</span>","                parsed<span class=\"k\">.</span>data<span class=\"k\">[</span> class_data<span class=\"k\">.</span>ResourceID <span class=\"k\">]</span> <span class=\"k\">=</span> class_data<span class=\"k\">;</span>","              <span class=\"k\">}</span><span class=\"k\">);</span>","","              <span class=\"c\">// Trigger callback with parsed data.</span>","              <span class=\"k\">return</span> callback<span class=\"k\">(</span> <span class=\"k\">null</span><span class=\"k\">,</span> parsed <span class=\"k\">);</span>","","            <span class=\"k\">}</span>","            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> Instance<span class=\"k\">.</span>utility<span class=\"k\">.</span>first<span class=\"k\">(</span> data<span class=\"k\">.</span>RETS<span class=\"k\">[</span> <span class=\"s\">'METADATA'</span> <span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">][</span> <span class=\"s\">'METADATA-TABLE'</span> <span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","              parsed<span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">'fields'</span><span class=\"k\">;</span>","              parsed<span class=\"k\">.</span>resource <span class=\"k\">=</span> data<span class=\"k\">.</span>RETS<span class=\"k\">[</span> <span class=\"s\">'METADATA'</span> <span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">][</span> <span class=\"s\">'METADATA-TABLE'</span> <span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">][</span><span class=\"s\">'$'</span><span class=\"k\">].</span>Resource<span class=\"k\">;</span>","","              <span class=\"c\">// Iterate through each class data type and create object</span>","              data<span class=\"k\">.</span>RETS<span class=\"k\">[</span> <span class=\"s\">'METADATA'</span> <span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">][</span> <span class=\"s\">'METADATA-TABLE'</span> <span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">][</span><span class=\"s\">'Field'</span><span class=\"k\">].</span>forEach<span class=\"k\">(</span> <span class=\"k\">function</span> iterate<span class=\"k\">(</span> class_data <span class=\"k\">)</span> <span class=\"k\">{</span>","                parsed<span class=\"k\">.</span>data<span class=\"k\">[</span> class_data<span class=\"k\">.</span>SystemName <span class=\"k\">]</span> <span class=\"k\">=</span> class_data<span class=\"k\">;</span>","              <span class=\"k\">}</span><span class=\"k\">);</span>","","              <span class=\"c\">// Trigger callback with parsed data.</span>","              <span class=\"k\">return</span> callback<span class=\"k\">(</span> <span class=\"k\">null</span><span class=\"k\">,</span> parsed <span class=\"k\">);</span>","","            <span class=\"k\">}</span>","","            <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span> <span class=\"s\">'Unknown RETS METADATA response sub-type.'</span> <span class=\"k\">);</span>","","          <span class=\"k\">}</span>","","          <span class=\"c\">// Some servers use RETS-STATUS to tell us when there were no matching records found</span>","          <span class=\"k\">if</span><span class=\"k\">(</span> data<span class=\"k\">.</span>RETS<span class=\"k\">[</span> <span class=\"s\">'RETS-STATUS'</span> <span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            parsed<span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">'status'</span><span class=\"k\">;</span>","            <span class=\"k\">return</span> callback<span class=\"k\">(</span> <span class=\"k\">null</span><span class=\"k\">,</span> parsed <span class=\"k\">);</span>","          <span class=\"k\">}</span>","","          <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span> <span class=\"s\">'Unknown RETS response type, could not identify nor parse.'</span> <span class=\"k\">);</span>","","        <span class=\"k\">}</span> <span class=\"k\">catch</span><span class=\"k\">(</span> error <span class=\"k\">)</span> <span class=\"k\">{</span>","          RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span> error<span class=\"k\">.</span>message <span class=\"k\">);</span>","          callback<span class=\"k\">(</span> error<span class=\"k\">,</span> parsed <span class=\"k\">)</span>","        <span class=\"k\">}</span>","","      <span class=\"k\">}</span><span class=\"k\">);</span>","","      <span class=\"c\">// Chainable.</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","    <span class=\"k\">}</span><span class=\"k\">,</span>","    enumerable<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","    configurable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    writable<span class=\"k\">:</span> <span class=\"k\">true</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  _requestHeaders<span class=\"k\">:</span> <span class=\"k\">{</span>","    <span class=\"c\">/**</span>","<span class=\"c\">     * Prepare Outgoing Headers</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @method _requestHeaders</span>","<span class=\"c\">     */</span>","    value<span class=\"k\">:</span> <span class=\"k\">function</span> _requestHeaders<span class=\"k\">()</span> <span class=\"k\">{</span>","      RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span> <span class=\"s\">'_requestHeaders'</span> <span class=\"k\">);</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'settings.headers.RETS-Version'</span><span class=\"k\">,</span> <span class=\"s\">'RETS/'</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.version'</span> <span class=\"k\">)</span> <span class=\"k\">);</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'settings.headers.User-Agent'</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.agent.user'</span> <span class=\"k\">)</span> <span class=\"k\">);</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'settings.headers.Accept'</span><span class=\"k\">,</span> <span class=\"s\">'*/*'</span> <span class=\"k\">);</span>","","      <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.agent.user'</span> <span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.agent.password'</span> <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","","        <span class=\"k\">var</span> ua_a1 <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>utility<span class=\"k\">.</span>md5<span class=\"k\">([</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.agent.user'</span> <span class=\"k\">),</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.agent.password'</span> <span class=\"k\">)</span>","        <span class=\"k\">].</span>join<span class=\"k\">(</span> <span class=\"s\">':'</span> <span class=\"k\">));</span>","","        <span class=\"k\">var</span> ua_dig_resp <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>utility<span class=\"k\">.</span>md5<span class=\"k\">([</span>","          ua_a1<span class=\"k\">.</span>trim<span class=\"k\">(),</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'authorization.request'</span><span class=\"k\">,</span> <span class=\"s\">''</span> <span class=\"k\">).</span>trim<span class=\"k\">(),</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'authorization.session'</span><span class=\"k\">,</span> <span class=\"s\">''</span> <span class=\"k\">).</span>trim<span class=\"k\">(),</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'authorization.version'</span><span class=\"k\">,</span> <span class=\"s\">''</span> <span class=\"k\">).</span>trim<span class=\"k\">()</span>","        <span class=\"k\">].</span>join<span class=\"k\">(</span> <span class=\"s\">':'</span> <span class=\"k\">));</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'authorization.session'</span> <span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">''</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'settings.headers.RETS-Session-ID'</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'authorization.session'</span> <span class=\"k\">));</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'settings.headers.RETS-UA-Authorization'</span><span class=\"k\">,</span> <span class=\"s\">'Digest '</span> <span class=\"k\">+</span> ua_dig_resp <span class=\"k\">);</span>","        <span class=\"k\">}</span>","","      <span class=\"k\">}</span>","","      <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'authorization.cookies'</span> <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","","        <span class=\"k\">var</span> _cookies <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'authorization.cookies'</span> <span class=\"k\">).</span>join<span class=\"k\">(</span> <span class=\"s\">'; '</span> <span class=\"k\">);</span>","","        <span class=\"c\">// @ghetto</span>","        _cookies <span class=\"k\">=</span> _cookies<span class=\"k\">.</span>replace<span class=\"k\">(</span> <span class=\"s\">'path=/;'</span><span class=\"k\">,</span> <span class=\"s\">''</span> <span class=\"k\">);</span>","        _cookies <span class=\"k\">=</span> _cookies<span class=\"k\">.</span>replace<span class=\"k\">(</span> <span class=\"s\">'path=/'</span><span class=\"k\">,</span> <span class=\"s\">''</span> <span class=\"k\">);</span>","        _cookies <span class=\"k\">=</span> _cookies<span class=\"k\">.</span>replace<span class=\"k\">(</span> <span class=\"s\">'HttpOnly;'</span><span class=\"k\">,</span> <span class=\"s\">''</span> <span class=\"k\">);</span>","","        <span class=\"c\">// don't actually set these; curl should be doing this for us</span>","        <span class=\"c\">// if you set twice some servers handle that badly.</span>","        <span class=\"c\">// this.set( 'settings.headers.Cookie', _cookies );</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>get<span class=\"k\">(</span> <span class=\"s\">'settings.headers'</span> <span class=\"k\">);</span>","","    <span class=\"k\">}</span><span class=\"k\">,</span>","    enumerable<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","    configurable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    writable<span class=\"k\">:</span> <span class=\"k\">true</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  _handleHeaders<span class=\"k\">:</span> <span class=\"k\">{</span>","    <span class=\"c\">/**</span>","<span class=\"c\">     * Handle Response Headers</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @method _handleHeaders</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @param headers {Object}</span>","<span class=\"c\">     * @returns {*}</span>","<span class=\"c\">     * @private</span>","<span class=\"c\">     */</span>","    value<span class=\"k\">:</span> <span class=\"k\">function</span> _handleHeaders<span class=\"k\">(</span> headers <span class=\"k\">)</span> <span class=\"k\">{</span>","      RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span> <span class=\"s\">'_handleHeaders'</span> <span class=\"k\">);</span>","","      <span class=\"k\">var</span> Instance <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","      <span class=\"c\">// e.g. rets-version: RETS/1.7.2</span>","      <span class=\"k\">if</span><span class=\"k\">(</span> headers<span class=\"k\">[</span> <span class=\"s\">'RETS-Version'</span> <span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'authorization.version'</span><span class=\"k\">,</span> headers<span class=\"k\">[</span> <span class=\"s\">'RETS-Version'</span> <span class=\"k\">]</span> <span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      <span class=\"c\">// e.g. RETS-Request: whateva</span>","      <span class=\"k\">if</span><span class=\"k\">(</span> headers<span class=\"k\">[</span> <span class=\"s\">'RETS-Request'</span> <span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'authorization.request'</span><span class=\"k\">,</span> headers<span class=\"k\">[</span> <span class=\"s\">'RETS-Request'</span> <span class=\"k\">]</span> <span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      <span class=\"c\">// session-id. e.g. Set-Cookie: RETS-Session-ID=nhwbkuszwg2eck0evrhq5wsu; path=/</span>","      <span class=\"k\">if</span><span class=\"k\">(</span> headers<span class=\"k\">[</span> <span class=\"s\">'Set-Cookie'</span> <span class=\"k\">]</span> <span class=\"k\">&amp;&amp;</span> headers<span class=\"k\">[</span> <span class=\"s\">'Set-Cookie'</span> <span class=\"k\">].</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","        Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'authorization.cookies'</span><span class=\"k\">,</span> headers<span class=\"k\">[</span> <span class=\"s\">'Set-Cookie'</span> <span class=\"k\">]</span> <span class=\"k\">);</span>","","        headers<span class=\"k\">[</span> <span class=\"s\">'Set-Cookie'</span> <span class=\"k\">].</span>forEach<span class=\"k\">(</span> <span class=\"k\">function</span><span class=\"k\">(</span> value <span class=\"k\">)</span> <span class=\"k\">{</span>","","          <span class=\"k\">if</span><span class=\"k\">(</span> value<span class=\"k\">.</span>indexOf<span class=\"k\">(</span> <span class=\"s\">'RETS-Session-ID'</span> <span class=\"k\">)</span> <span class=\"k\">&gt;</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","","            <span class=\"c\">// e.g. \"RETS-Session-ID=y24mpczv2i0ts3d5lkv4c4te; path=/\" =&gt; \"y24mpczv2i0ts3d5lkv4c4te\"</span>","            <span class=\"k\">var</span> _match <span class=\"k\">=</span> value<span class=\"k\">.</span>match<span class=\"k\">(</span> <span class=\"s\">/RETS-Session-ID\\=(.*?)(\\;|\\s+|$)/</span> <span class=\"k\">);</span>","","            Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'authorization.session'</span><span class=\"k\">,</span> _match<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">);</span>","          <span class=\"k\">}</span>","","        <span class=\"k\">}</span><span class=\"k\">);</span>","","      <span class=\"k\">}</span>","","      <span class=\"c\">// .e.g Content-Type: text/xml</span>","      <span class=\"k\">if</span><span class=\"k\">(</span> headers<span class=\"k\">[</span> <span class=\"s\">'content-type'</span> <span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'support.format'</span><span class=\"k\">,</span> headers<span class=\"k\">[</span> <span class=\"s\">'content-type'</span> <span class=\"k\">]</span> <span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      <span class=\"c\">// e.g. X-Powered-By: ASP.NET</span>","      <span class=\"k\">if</span><span class=\"k\">(</span> headers<span class=\"k\">[</span> <span class=\"s\">'x-powered-by'</span> <span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'server.powered'</span><span class=\"k\">,</span> headers<span class=\"k\">[</span> <span class=\"s\">'x-powered-by'</span> <span class=\"k\">]</span> <span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      <span class=\"c\">// Save Returned Server details.</span>","      <span class=\"k\">if</span><span class=\"k\">(</span> headers<span class=\"k\">[</span> <span class=\"s\">'server'</span> <span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'server.name'</span><span class=\"k\">,</span>  headers<span class=\"k\">[</span> <span class=\"s\">'server'</span> <span class=\"k\">]</span> <span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      <span class=\"c\">// e.g. RETS-Server: Interealty-RETS/1.5.247.0</span>","      <span class=\"k\">if</span><span class=\"k\">(</span> headers<span class=\"k\">[</span> <span class=\"s\">'rets-server'</span> <span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        Instance<span class=\"k\">.</span>set<span class=\"k\">(</span> <span class=\"s\">'server.rets'</span><span class=\"k\">,</span>  headers<span class=\"k\">[</span> <span class=\"s\">'rets-server'</span> <span class=\"k\">]</span> <span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","    <span class=\"k\">}</span><span class=\"k\">,</span>","    enumerable<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","    configurable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    writable<span class=\"k\">:</span> <span class=\"k\">true</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * RETS Constructor Properties.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> */</span>","Object<span class=\"k\">.</span>defineProperties<span class=\"k\">(</span> module<span class=\"k\">.</span>exports <span class=\"k\">=</span> RETS<span class=\"k\">,</span> <span class=\"k\">{</span>","  debug<span class=\"k\">:</span> <span class=\"k\">{</span>","    <span class=\"c\">/**</span>","<span class=\"c\">     * RETS Debugger</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @esample</span>","<span class=\"c\">     *    RETS.debug( 'Debug Mesage' );</span>","<span class=\"c\">     *</span>","<span class=\"c\">     */</span>","    value<span class=\"k\">:</span> require<span class=\"k\">(</span> <span class=\"s\">'debug'</span> <span class=\"k\">)(</span> <span class=\"s\">'rets:client'</span> <span class=\"k\">),</span>","    enumerable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    configurable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    writable<span class=\"k\">:</span> <span class=\"k\">true</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  connect<span class=\"k\">:</span> <span class=\"k\">{</span>","    <span class=\"c\">/**</span>","<span class=\"c\">     * Create new Connection</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @param settings</span>","<span class=\"c\">     * @param callback</span>","<span class=\"c\">     * @returns {RETS}</span>","<span class=\"c\">     */</span>","    value<span class=\"k\">:</span> <span class=\"k\">function</span> connect<span class=\"k\">(</span> settings<span class=\"k\">,</span> callback <span class=\"k\">)</span> <span class=\"k\">{</span>","      RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span> <span class=\"s\">'connect'</span> <span class=\"k\">);</span>","      <span class=\"k\">return</span> <span class=\"k\">new</span> RETS<span class=\"k\">(</span> settings<span class=\"k\">,</span> callback <span class=\"k\">||</span> RETS<span class=\"k\">.</span>prototype<span class=\"k\">.</span>utility<span class=\"k\">.</span>noop <span class=\"k\">)</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    enumerable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    configurable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    writable<span class=\"k\">:</span> <span class=\"k\">true</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  createConnection<span class=\"k\">:</span> <span class=\"k\">{</span>","    <span class=\"c\">/**</span>","<span class=\"c\">     * Create new Connection</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @param settings</span>","<span class=\"c\">     * @param callback</span>","<span class=\"c\">     * @returns {RETS}</span>","<span class=\"c\">     */</span>","    value<span class=\"k\">:</span> <span class=\"k\">function</span> createConnection<span class=\"k\">(</span> settings<span class=\"k\">,</span> callback <span class=\"k\">)</span> <span class=\"k\">{</span>","      RETS<span class=\"k\">.</span>debug<span class=\"k\">(</span> <span class=\"s\">'createConnection'</span> <span class=\"k\">);</span>","      <span class=\"k\">return</span> <span class=\"k\">new</span> RETS<span class=\"k\">(</span> settings<span class=\"k\">,</span> RETS<span class=\"k\">.</span>prototype<span class=\"k\">.</span>utility<span class=\"k\">.</span>noop <span class=\"k\">)</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    enumerable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    configurable<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","    writable<span class=\"k\">:</span> <span class=\"k\">true</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">);</span>"];
_$jscoverage['rets.js'][40]++;
var stream = require("stream");
_$jscoverage['rets.js'][41]++;
var util = require("util");
_$jscoverage['rets.js'][43]++;
util.inherits(RETSResponse, stream.Transform);
_$jscoverage['rets.js'][44]++;
function RETSResponse() {
  _$jscoverage['rets.js'][46]++;
  if ((! (this instanceof RETSResponse))) {
    _$jscoverage['rets.js'][47]++;
    return new RETSResponse();
  }
  _$jscoverage['rets.js'][50]++;
  stream.Transform.call(this);
  _$jscoverage['rets.js'][52]++;
  this._transform = (function (chunk, encoding, _callback) {
  _$jscoverage['rets.js'][55]++;
  this.push(chunk);
  _$jscoverage['rets.js'][56]++;
  _callback();
});
  _$jscoverage['rets.js'][59]++;
  this._flush = (function (_callback) {
  _$jscoverage['rets.js'][60]++;
  RETS.debug("Flushing RETS Response");
  _$jscoverage['rets.js'][61]++;
  _callback();
});
}
_$jscoverage['rets.js'][66]++;
util.inherits(RETS, stream.Transform);
_$jscoverage['rets.js'][67]++;
function RETS(settings, callback) {
  _$jscoverage['rets.js'][70]++;
  if ((! (this instanceof RETS))) {
    _$jscoverage['rets.js'][71]++;
    return new RETS(settings, callback);
  }
  _$jscoverage['rets.js'][74]++;
  this._curl = new (this.utility.libcurl)();
  _$jscoverage['rets.js'][77]++;
  this.utility.Setting(this);
  _$jscoverage['rets.js'][78]++;
  this.utility.Emitter(this);
  _$jscoverage['rets.js'][79]++;
  stream.Transform.call(this);
  _$jscoverage['rets.js'][82]++;
  this.set("settings", this.utility.defaults(settings, {protocol: (process.env.RETS_PROTOCOL || "http:"), host: process.env.RETS_HOST, path: process.env.RETS_PATH, user: process.env.RETS_USER, pass: process.env.RETS_PASS, port: (process.env.RETS_PORT || 80), version: (process.env.RETS_VERSION || "1.7"), agent: {user: (process.env.RETS_AGENT || "RETS-Node-Client/1.0"), password: process.env.RETS_AGENT_PASSWORD}}));
  _$jscoverage['rets.js'][97]++;
  this.set("authorization", {request: null, version: ["RETS", this.get("settings.version")].join("/"), cookiefile: ("/tmp/" + this.get("settings.host") + "-" + Math.floor((((Math.random() * 1000) + 1) * 1337)) + ".txt")});
  _$jscoverage['rets.js'][104]++;
  this.set("capabilities", {ChangePassword: undefined, GetObject: undefined, Login: undefined, Logout: undefined, Search: undefined, GetMetadata: undefined, ServerInformation: undefined});
  _$jscoverage['rets.js'][119]++;
  if (("function" === (typeof callback))) {
    _$jscoverage['rets.js'][120]++;
    this.once("connection", callback);
  }
  _$jscoverage['rets.js'][123]++;
  this.utility.digest({username: (this.get("settings.user") || this.get("settings.username")), password: (this.get("settings.pass") || this.get("settings.password")), method: "GET", host: this.get("settings.host"), path: this.get("settings.path"), port: this.get("settings.port"), protocol: this.get("settings.protocol"), headers: this._requestHeaders(), agent: {user: (this.get("settings.agent.user") || process.env.RETS_AGENT || "RETS-Node-Client/1.0"), pass: this.get("settings.agent.password")}, session: (this.get("authorization.session") || ""), cookie: this.get("authorization.cookiefile"), version: (this.get("authorization.version") || []), buffer: true}, this._authorization.bind(this)).perform();
  _$jscoverage['rets.js'][142]++;
  this._transform = (function (chunk, encoding, _callback) {
  _$jscoverage['rets.js'][144]++;
  if ((this._readableState.pipesCount > 0)) {
    _$jscoverage['rets.js'][144]++;
    this.push((chunk.toString("utf8") + "\n"));
  }
  _$jscoverage['rets.js'][145]++;
  _callback();
});
  _$jscoverage['rets.js'][148]++;
  this._flush = (function (_callback) {
  _$jscoverage['rets.js'][149]++;
  RETS.debug("Flushing RETS Stream");
  _$jscoverage['rets.js'][150]++;
  _callback();
});
  _$jscoverage['rets.js'][154]++;
  return this;
}
_$jscoverage['rets.js'][162]++;
Object.defineProperties(RETS.prototype, {getAllLookupValues: {value: (function getAllLookupValues(resource, callback) {
  _$jscoverage['rets.js'][178]++;
  RETS.debug("getAllLookupValues( %s )", resource);
  _$jscoverage['rets.js'][181]++;
  return this;
}), enumerable: true, configurable: true, writable: true}, getClassifications: {value: (function getClassifications(type, callback) {
  _$jscoverage['rets.js'][200]++;
  return this.sendRequest("url.GetMetadata", {Type: "METADATA-CLASS", ID: (type || "Property")}, callback);
}), enumerable: true, configurable: true, writable: true}, getLookupValues: {value: (function getLookupValues(resource, lookupname) {
  _$jscoverage['rets.js'][208]++;
  RETS.debug("getLookupValues");
  _$jscoverage['rets.js'][209]++;
  return this.sendRequest("url.GetMetadata", {Type: "METADATA-LOOKUP_TYPE", ID: (resource + ":" + lookupname)}, callback);
}), enumerable: true, configurable: true, writable: true}, getMetadataResources: {value: (function getMetadataResources(id, callback) {
  _$jscoverage['rets.js'][217]++;
  RETS.debug("getMetadataResources");
  _$jscoverage['rets.js'][218]++;
  return this.sendRequest("url.GetMetadata", {Type: "METADATA-RESOURCE", ID: (id || "0")}, callback);
}), enumerable: true, configurable: true, writable: true}, getMetadataInfo: {value: (function getMetadataInfo() {
  _$jscoverage['rets.js'][226]++;
  RETS.debug("getMetadataInfo");
}), enumerable: true, configurable: true, writable: true}, getObject: {value: (function getObject(resource, type, id, photoNumber, location, callback) {
  _$jscoverage['rets.js'][234]++;
  RETS.debug("getObject");
  _$jscoverage['rets.js'][235]++;
  var sendID = id;
  _$jscoverage['rets.js'][236]++;
  return this.streamRequest("url.GetObject", {Resource: (resource || "Property"), Type: (type || "PHOTO"), ID: sendID, Location: (location || 0)});
}), enumerable: true, configurable: true, writable: true}, getAllTransactions: {value: (function GetAllTransactions() {
}), enumerable: true, configurable: true, writable: true}, getMetadataObjects: {value: (function GetMetadataObjects(id, callback) {
  _$jscoverage['rets.js'][250]++;
  RETS.debug("getMetadataObjects");
  _$jscoverage['rets.js'][251]++;
  return this.sendRequest("url.GetMetadata", {Type: "METADATA-OBJECT", ID: (id || "Property"), Format: "STANDARD-XML"}, callback);
}), enumerable: true, configurable: true, writable: true}, getMetadataTable: {value: (function getMetadataTable(resource, classification, callback) {
  _$jscoverage['rets.js'][270]++;
  RETS.debug("getMetadataTable( %s, %s )", resource, classification);
  _$jscoverage['rets.js'][273]++;
  return this.sendRequest("url.GetMetadata", {Type: "METADATA-TABLE", ID: (resource + ":" + classification)}, callback);
}), enumerable: true, configurable: true, writable: true}, getMetadataClasses: {value: (function getMetadataClasses(resource, callback) {
  _$jscoverage['rets.js'][288]++;
  RETS.debug("getMetadataClasses( %s )", resource);
  _$jscoverage['rets.js'][291]++;
  return this.sendRequest("url.GetMetadata", {Type: "METADATA-CLASS", ID: (resource || "Property")}, callback);
}), enumerable: true, configurable: true, writable: true}, searchQuery: {value: (function searchQuery(args, callback, stream) {
  _$jscoverage['rets.js'][308]++;
  RETS.debug("searchQuery( %s )", args);
  _$jscoverage['rets.js'][310]++;
  if ((stream !== true)) {
    _$jscoverage['rets.js'][311]++;
    this.sendRequest("url.Search", {SearchType: (args.SearchType || "Property"), Class: (args.Class || "A"), Query: (args.Query || ""), QueryType: (args.QueryType || "DMQL2"), Count: (((args.Count === false) || (args.Count === 0))? 0: 1), Format: (args.Format || "STANDARD-XML"), Limit: (args.Limit || 99), StandardNames: (args.StandardNames || 0)}, callback);
    _$jscoverage['rets.js'][323]++;
    return this;
  }
  else {
    _$jscoverage['rets.js'][326]++;
    this.streamRequest("url.Search", {SearchType: (args.SearchType || "Property"), Class: (args.Class || "A"), Query: (args.Query || ""), QueryType: (args.QueryType || "DMQL2"), Count: (((args.Count === false) || (args.Count === 0))? 0: 1), Format: (args.Format || "STANDARD-XML"), Limit: (args.Limit || 99), StandardNames: (args.StandardNames || 0)});
    _$jscoverage['rets.js'][339]++;
    return this;
  }
}), enumerable: true, configurable: true, writable: true}, sendRequest: {value: (function sendRequest(action, args, callback) {
  _$jscoverage['rets.js'][360]++;
  RETS.debug("sendRequest");
  _$jscoverage['rets.js'][362]++;
  var querystring = require("querystring");
  _$jscoverage['rets.js'][363]++;
  var Instance = this;
  _$jscoverage['rets.js'][365]++;
  var _url = [Instance.get("settings.protocol"), "//", Instance.get("settings.host"), ":", Instance.get("settings.port", 80), Instance.get(action), "?", querystring.stringify(args)].join("");
  _$jscoverage['rets.js'][369]++;
  callback = (("function" === (typeof callback))? callback: this.utility.noop);
  _$jscoverage['rets.js'][371]++;
  this.utility.digest({username: (this.get("settings.user") || this.get("settings.username")), password: (this.get("settings.pass") || this.get("settings.password")), method: "GET", host: this.get("settings.host"), protocol: this.get("settings.protocol"), port: this.get("settings.port"), path: [Instance.get(action), querystring.stringify(args)].join("?"), headers: Instance._requestHeaders(), nc: this.get("authorization.nc"), cnonce: this.get("authorization.cnonce"), realm: this.get("authorization.realm"), qop: this.get("authorization.qop"), opaque: this.get("authorization.opaque"), nonce: this.get("authorization.nonce"), agent: {user: (this.get("settings.agent.user") || process.env.RETS_AGENT || "RETS-Node-Client/1.0"), pass: this.get("settings.agent.password")}, cookie: this.get("authorization.cookiefile"), version: (this.get("authorization.version") || ""), buffer: true}, (function haveResponse(error, res, body) {
  _$jscoverage['rets.js'][398]++;
  RETS.debug("sendRequest->haveResponse");
  _$jscoverage['rets.js'][400]++;
  if (error) {
    _$jscoverage['rets.js'][401]++;
    return callback(error, body);
  }
  _$jscoverage['rets.js'][405]++;
  Instance._handleHeaders(res.headers);
  _$jscoverage['rets.js'][408]++;
  Instance._handleBody(body, (function bodyParsed(error, data) {
  _$jscoverage['rets.js'][409]++;
  RETS.debug("sendRequest->haveResponse->bodyParsed");
  _$jscoverage['rets.js'][411]++;
  if ((error && (error.code == 401))) {
    _$jscoverage['rets.js'][411]++;
    return;
  }
  _$jscoverage['rets.js'][412]++;
  if (error) {
    _$jscoverage['rets.js'][413]++;
    return callback(error, data);
  }
  _$jscoverage['rets.js'][417]++;
  return callback(null, data);
}));
})).perform();
  _$jscoverage['rets.js'][423]++;
  return this;
}), enumerable: true, configurable: true, writable: true}, streamRequest: {value: (function streamRequest(action, args) {
  _$jscoverage['rets.js'][441]++;
  RETS.debug("streamRequest");
  _$jscoverage['rets.js'][443]++;
  var querystring = require("querystring");
  _$jscoverage['rets.js'][444]++;
  var Instance = this;
  _$jscoverage['rets.js'][446]++;
  var _url = [Instance.get("settings.protocol"), "//", Instance.get("settings.host"), ":", Instance.get("settings.port", 80), Instance.get(action), "?", querystring.stringify(args)].join("");
  _$jscoverage['rets.js'][450]++;
  callback = (("function" === (typeof callback))? callback: this.utility.noop);
  _$jscoverage['rets.js'][451]++;
  streamCallback = (("function" === (typeof streamCallback))? streamCallback: this.utility.noop);
  _$jscoverage['rets.js'][453]++;
  var request = this.utility.digest({username: (this.get("settings.user") || this.get("settings.username")), password: (this.get("settings.pass") || this.get("settings.password")), method: "GET", host: this.get("settings.host"), protocol: this.get("settings.protocol"), port: this.get("settings.port"), path: [Instance.get(action), querystring.stringify(args)].join("?"), headers: Instance._requestHeaders(), nc: this.get("authorization.nc"), cnonce: this.get("authorization.cnonce"), realm: this.get("authorization.realm"), qop: this.get("authorization.qop"), opaque: this.get("authorization.opaque"), nonce: this.get("authorization.nonce"), agent: {user: (this.get("settings.agent.user") || process.env.RETS_AGENT || "RETS-Node-Client/1.0"), pass: this.get("settings.agent.password")}, cookie: this.get("authorization.cookiefile"), version: (this.get("authorization.version") || ""), buffer: false});
  _$jscoverage['rets.js'][481]++;
  var headers = [];
  _$jscoverage['rets.js'][482]++;
  var response = new RETSResponse();
  _$jscoverage['rets.js'][484]++;
  request.on("data", (function (chunk) {
  _$jscoverage['rets.js'][485]++;
  response.write(chunk);
  _$jscoverage['rets.js'][486]++;
  return chunk.length;
}));
  _$jscoverage['rets.js'][489]++;
  request.on("header", (function (chunk) {
  _$jscoverage['rets.js'][490]++;
  var h = chunk.toString().split(":");
  _$jscoverage['rets.js'][491]++;
  headers[h[0]] = h[1];
  _$jscoverage['rets.js'][493]++;
  return chunk.length;
}));
  _$jscoverage['rets.js'][498]++;
  request.on("error", (function (e) {
  _$jscoverage['rets.js'][499]++;
  RETS.debug(("error: " + e.message));
  _$jscoverage['rets.js'][500]++;
  request.close();
}));
  _$jscoverage['rets.js'][503]++;
  request.on("end", (function () {
  _$jscoverage['rets.js'][504]++;
  response.end();
  _$jscoverage['rets.js'][506]++;
  if ((request.getinfo("RESPONSE_CODE") !== 200)) {
    _$jscoverage['rets.js'][507]++;
    RETS.debug("Error: ", request.getinfo("RESPONSE_CODE"), headers);
  }
}));
  _$jscoverage['rets.js'][511]++;
  if ((action == "url.GetObject")) {
    _$jscoverage['rets.js'][512]++;
    RETS.debug("GetObject action: return response stream");
    _$jscoverage['rets.js'][514]++;
    request.perform();
    _$jscoverage['rets.js'][515]++;
    return response;
  }
  _$jscoverage['rets.js'][518]++;
  var xml = new (this.utility.XmlStream)(response);
  _$jscoverage['rets.js'][520]++;
  xml.preserve("COLUMNS", true);
  _$jscoverage['rets.js'][521]++;
  xml.on("endElement: COLUMNS", (function (row) {
  _$jscoverage['rets.js'][523]++;
  Instance.write(row.$text.toString("utf8"));
}));
  _$jscoverage['rets.js'][526]++;
  xml.preserve("COUNT", true);
  _$jscoverage['rets.js'][527]++;
  xml.on("endElement: COUNT", (function (row) {
  _$jscoverage['rets.js'][529]++;
  RETS.debug("Query has %s results, we are fetching a max of %s records", row.$.Records, args.Limit);
}));
  _$jscoverage['rets.js'][532]++;
  xml.preserve("MAXROWS", true);
  _$jscoverage['rets.js'][533]++;
  xml.on("endElement: MAXROWS", (function (row) {
}));
  _$jscoverage['rets.js'][539]++;
  var rows = 0;
  _$jscoverage['rets.js'][540]++;
  xml.preserve("DATA", true);
  _$jscoverage['rets.js'][541]++;
  xml.on("endElement: DATA", (function (row) {
  _$jscoverage['rets.js'][543]++;
  (rows++);
  _$jscoverage['rets.js'][544]++;
  var record = row.$text.toString("utf8").replace(/(\r\n|\n|\r)/gm, " ");
  _$jscoverage['rets.js'][545]++;
  if ((record.indexOf("\n") > -1)) {
    _$jscoverage['rets.js'][545]++;
    console.log("Newline", record.indexOf("\n"));
  }
  _$jscoverage['rets.js'][546]++;
  Instance.write(record);
}));
  _$jscoverage['rets.js'][550]++;
  xml.on("end", (function () {
  _$jscoverage['rets.js'][551]++;
  RETS.debug("Streamed %s records", rows);
  _$jscoverage['rets.js'][552]++;
  Instance.emit("finish");
}));
  _$jscoverage['rets.js'][555]++;
  request.perform();
  _$jscoverage['rets.js'][557]++;
  return request;
}), enumerable: true, configurable: true, writable: true}, utility: {value: require("./utility"), enumerable: false, configurable: true, writable: true}, _authorization: {value: (function _authorization(error, res, data) {
  _$jscoverage['rets.js'][582]++;
  RETS.debug("_authorization");
  _$jscoverage['rets.js'][584]++;
  var Instance = this;
  _$jscoverage['rets.js'][587]++;
  if (error) {
    _$jscoverage['rets.js'][588]++;
    RETS.debug("_authorization::error", error);
    _$jscoverage['rets.js'][589]++;
    return Instance.emit("connection", error, Instance).emit("connection.error", error, Instance);
  }
  _$jscoverage['rets.js'][594]++;
  Instance._handleHeaders(res.headers);
  _$jscoverage['rets.js'][597]++;
  Instance._handleBody(data, (function parsed(error, data) {
  _$jscoverage['rets.js'][598]++;
  RETS.debug("_authorization::end->parsed", error, (typeof data));
  _$jscoverage['rets.js'][601]++;
  if (error) {
    _$jscoverage['rets.js'][602]++;
    return Instance.emit("connection.parse.error", error, data).emit("connection", error, data);
  }
  _$jscoverage['rets.js'][606]++;
  if ((data.code !== 0)) {
    _$jscoverage['rets.js'][607]++;
    return Instance.emit("connection.error", new Error("Connection response code not the expected 0."), data);
  }
  _$jscoverage['rets.js'][611]++;
  Instance.set("provider.name", data.data.MemberName);
  _$jscoverage['rets.js'][612]++;
  Instance.set("provider.user", data.data.User);
  _$jscoverage['rets.js'][613]++;
  Instance.set("provider.broker", data.data.Broker);
  _$jscoverage['rets.js'][616]++;
  Instance.set("capabilities.ServerInformation", true);
  _$jscoverage['rets.js'][619]++;
  Instance.set("meta.version", data.data.MetadataVersion);
  _$jscoverage['rets.js'][620]++;
  Instance.set("meta.min_version", data.data.MinMetadataVersion);
  _$jscoverage['rets.js'][621]++;
  Instance.set("meta.min_timestamp", data.data.MinMetadataTimeStamp);
  _$jscoverage['rets.js'][622]++;
  Instance.set("meta.timestamp", data.data.MetadataTimeStamp);
  _$jscoverage['rets.js'][623]++;
  Instance.set("meta.timeout", data.data.TimeoutSeconds);
  _$jscoverage['rets.js'][626]++;
  if (data.data.GetObject) {
    _$jscoverage['rets.js'][627]++;
    Instance.set("url.Login", data.data.Login);
    _$jscoverage['rets.js'][628]++;
    Instance.set("capabilities.Login", true);
  }
  _$jscoverage['rets.js'][631]++;
  if (data.data.ChangePassword) {
    _$jscoverage['rets.js'][632]++;
    Instance.set("url.ChangePassword", data.data.ChangePassword);
    _$jscoverage['rets.js'][633]++;
    Instance.set("capabilities.ChangePassword", true);
  }
  _$jscoverage['rets.js'][636]++;
  if (data.data.GetObject) {
    _$jscoverage['rets.js'][637]++;
    Instance.set("url.GetObject", data.data.GetObject);
    _$jscoverage['rets.js'][638]++;
    Instance.set("capabilities.GetObject", true);
  }
  _$jscoverage['rets.js'][641]++;
  if (data.data.GetObject) {
    _$jscoverage['rets.js'][642]++;
    Instance.set("url.Logout", data.data.Logout);
    _$jscoverage['rets.js'][643]++;
    Instance.set("capabilities.Logout", true);
  }
  _$jscoverage['rets.js'][646]++;
  if (data.data.GetObject) {
    _$jscoverage['rets.js'][647]++;
    Instance.set("url.Search", data.data.Search);
    _$jscoverage['rets.js'][648]++;
    Instance.set("capabilities.Search", true);
  }
  _$jscoverage['rets.js'][651]++;
  if (data.data.GetObject) {
    _$jscoverage['rets.js'][652]++;
    Instance.set("url.GetMetadata", data.data.GetMetadata);
    _$jscoverage['rets.js'][653]++;
    Instance.set("capabilities.GetMetadata", true);
  }
  _$jscoverage['rets.js'][657]++;
  Instance.emit("connection", null, Instance);
  _$jscoverage['rets.js'][658]++;
  Instance.emit("connection.success", Instance);
}));
}), enumerable: false, configurable: true, writable: true}, _parseCapabilities: {value: (function (data, callback) {
  _$jscoverage['rets.js'][669]++;
  RETS.debug("_parseCapabilities");
  _$jscoverage['rets.js'][671]++;
  var Instance = this;
  _$jscoverage['rets.js'][673]++;
  Instance._handleBody(data, (function parsed(error, data) {
  _$jscoverage['rets.js'][674]++;
  RETS.debug("_parseCapabilities::end->parsed", error, (typeof data));
  _$jscoverage['rets.js'][677]++;
  if (error) {
    _$jscoverage['rets.js'][678]++;
    return Instance.emit("connection.parse.error", error, data).emit("connection", error, data);
  }
  _$jscoverage['rets.js'][682]++;
  if ((data.code !== 0)) {
    _$jscoverage['rets.js'][683]++;
    return Instance.emit("connection.error", new Error("Connection response code not the expected 0."), data);
  }
  _$jscoverage['rets.js'][687]++;
  Instance.set("provider.name", data.data.MemberName);
  _$jscoverage['rets.js'][688]++;
  Instance.set("provider.user", data.data.User);
  _$jscoverage['rets.js'][689]++;
  Instance.set("provider.broker", data.data.Broker);
  _$jscoverage['rets.js'][692]++;
  Instance.set("capabilities.ServerInformation", true);
  _$jscoverage['rets.js'][695]++;
  Instance.set("meta.version", data.data.MetadataVersion);
  _$jscoverage['rets.js'][696]++;
  Instance.set("meta.min_version", data.data.MinMetadataVersion);
  _$jscoverage['rets.js'][697]++;
  Instance.set("meta.min_timestamp", data.data.MinMetadataTimeStamp);
  _$jscoverage['rets.js'][698]++;
  Instance.set("meta.timestamp", data.data.MetadataTimeStamp);
  _$jscoverage['rets.js'][699]++;
  Instance.set("meta.timeout", data.data.TimeoutSeconds);
  _$jscoverage['rets.js'][702]++;
  var clean_uri = (function (uri) {
  _$jscoverage['rets.js'][703]++;
  var uri_root = /http.*\//i;
  _$jscoverage['rets.js'][704]++;
  return uri.replace(uri_root, "/");
});
  _$jscoverage['rets.js'][708]++;
  if (data.data.GetObject) {
    _$jscoverage['rets.js'][709]++;
    Instance.set("url.Login", clean_uri(data.data.Login));
    _$jscoverage['rets.js'][710]++;
    Instance.set("capabilities.Login", true);
  }
  _$jscoverage['rets.js'][713]++;
  if (data.data.ChangePassword) {
    _$jscoverage['rets.js'][714]++;
    Instance.set("url.ChangePassword", clean_uri(data.data.ChangePassword));
    _$jscoverage['rets.js'][715]++;
    Instance.set("capabilities.ChangePassword", true);
  }
  _$jscoverage['rets.js'][718]++;
  if (data.data.GetObject) {
    _$jscoverage['rets.js'][719]++;
    Instance.set("url.GetObject", clean_uri(data.data.GetObject));
    _$jscoverage['rets.js'][720]++;
    Instance.set("capabilities.GetObject", true);
  }
  _$jscoverage['rets.js'][723]++;
  if (data.data.GetObject) {
    _$jscoverage['rets.js'][724]++;
    Instance.set("url.Logout", clean_uri(data.data.Logout));
    _$jscoverage['rets.js'][725]++;
    Instance.set("capabilities.Logout", true);
  }
  _$jscoverage['rets.js'][728]++;
  if (data.data.GetObject) {
    _$jscoverage['rets.js'][729]++;
    Instance.set("url.Search", clean_uri(data.data.Search));
    _$jscoverage['rets.js'][730]++;
    Instance.set("capabilities.Search", true);
  }
  _$jscoverage['rets.js'][733]++;
  if (data.data.GetObject) {
    _$jscoverage['rets.js'][734]++;
    Instance.set("url.GetMetadata", clean_uri(data.data.GetMetadata));
    _$jscoverage['rets.js'][735]++;
    Instance.set("capabilities.GetMetadata", true);
  }
  _$jscoverage['rets.js'][738]++;
  process.nextTick((function () {
  _$jscoverage['rets.js'][739]++;
  callback(null);
}));
}));
}), enumerable: true, configurable: true, writable: true}, _handleBody: {value: (function _handleBody(body, callback) {
  _$jscoverage['rets.js'][765]++;
  RETS.debug("_handleBody");
  _$jscoverage['rets.js'][768]++;
  var Instance = this;
  _$jscoverage['rets.js'][770]++;
  var parsed = {code: undefined, text: undefined, type: undefined, data: {}};
  _$jscoverage['rets.js'][778]++;
  this.utility.parseString(body, (function xml_parsed(error, data) {
  _$jscoverage['rets.js'][779]++;
  RETS.debug("_handleBody->xml_parsed");
  _$jscoverage['rets.js'][781]++;
  try {
    _$jscoverage['rets.js'][783]++;
    if (error) {
      _$jscoverage['rets.js'][784]++;
      RETS.debug("Error parsing body: ", error.message, body);
      _$jscoverage['rets.js'][785]++;
      throw new Error(("Response parse error: " + error.message));
    }
    _$jscoverage['rets.js'][788]++;
    if ((! data)) {
      _$jscoverage['rets.js'][789]++;
      throw new Error("No data to parse.");
    }
    _$jscoverage['rets.js'][792]++;
    if (("object" !== (typeof data.RETS))) {
      _$jscoverage['rets.js'][793]++;
      throw new Error("Response does not contain a proper RETS property. ");
    }
    _$jscoverage['rets.js'][797]++;
    Instance.utility.extend(parsed, {code: parseInt(data.RETS.$.ReplyCode), text: data.RETS.$.ReplyText});
    _$jscoverage['rets.js'][803]++;
    if ((parsed.code === 20036)) {
      _$jscoverage['rets.js'][804]++;
      throw new Error("Missing User-Agent request header field.");
    }
    _$jscoverage['rets.js'][809]++;
    if ((parsed.code === 20037)) {
      _$jscoverage['rets.js'][810]++;
      throw new Error("User Agent not registered or denied.");
    }
    _$jscoverage['rets.js'][814]++;
    if ((parsed.code === 20200)) {
      _$jscoverage['rets.js'][815]++;
      return callback(parsed, null);
    }
    _$jscoverage['rets.js'][819]++;
    if ((parsed.code === 20201)) {
      _$jscoverage['rets.js'][820]++;
      RETS.debug(data.RETS.COUNT);
      _$jscoverage['rets.js'][821]++;
      parsed.type = "data";
      _$jscoverage['rets.js'][822]++;
      parsed.data = [];
      _$jscoverage['rets.js'][824]++;
      return callback(null, parsed);
    }
    _$jscoverage['rets.js'][835]++;
    if ((parsed.code === 20203)) {
      _$jscoverage['rets.js'][836]++;
      return callback(parsed, null);
    }
    _$jscoverage['rets.js'][841]++;
    if ((parsed.code === 20206)) {
      _$jscoverage['rets.js'][842]++;
      return callback(parsed, null);
    }
    _$jscoverage['rets.js'][847]++;
    if ((parsed.code === 20513)) {
      _$jscoverage['rets.js'][848]++;
      throw new Error("Miscellaneous Error: Missing required User-Agent request header. See the 'Required Client Request Header Fields' section in the RETS specification.");
    }
    _$jscoverage['rets.js'][852]++;
    if ((data.RETS.COLUMNS && data.RETS.DATA)) {
      _$jscoverage['rets.js'][853]++;
      parsed.count = data.RETS.COUNT[0].$.Records;
      _$jscoverage['rets.js'][854]++;
      parsed.delimiter = data.RETS.DELIMITER[0].$.value;
      _$jscoverage['rets.js'][855]++;
      parsed.columns = data.RETS.COLUMNS.join("\n");
      _$jscoverage['rets.js'][856]++;
      parsed.records = data.RETS.DATA.join("\n");
      _$jscoverage['rets.js'][857]++;
      parsed.data = [data.RETS.COLUMNS.concat(data.RETS.DATA).join("\n")];
      _$jscoverage['rets.js'][858]++;
      return callback(null, parsed);
    }
    _$jscoverage['rets.js'][862]++;
    if (data.RETS.REData) {
      _$jscoverage['rets.js'][868]++;
      parsed.type = "data";
      _$jscoverage['rets.js'][869]++;
      parsed.data = data.RETS.REData[0].REProperties[0].ResidentialProperty;
      _$jscoverage['rets.js'][871]++;
      return callback(null, parsed);
    }
    _$jscoverage['rets.js'][876]++;
    if (data.RETS["RETS-RESPONSE"]) {
      _$jscoverage['rets.js'][878]++;
      parsed.type = "connection";
      _$jscoverage['rets.js'][883]++;
      data.RETS["RETS-RESPONSE"][0].split("\r\n").forEach((function line_parser(line, index) {
  _$jscoverage['rets.js'][886]++;
  if ((! line)) {
    _$jscoverage['rets.js'][887]++;
    return;
  }
  _$jscoverage['rets.js'][890]++;
  var split = line.split("=");
  _$jscoverage['rets.js'][891]++;
  var key = split[0].replace(/^\s+|\s+$/g, "");
  _$jscoverage['rets.js'][892]++;
  var value = split[1].replace(/^\s+|\s+$/g, "");
  _$jscoverage['rets.js'][894]++;
  parsed.data[key] = value;
}));
      _$jscoverage['rets.js'][899]++;
      return callback(null, parsed);
    }
    _$jscoverage['rets.js'][904]++;
    if ((data.RETS.METADATA && Instance.utility.first(data.RETS.METADATA))) {
      _$jscoverage['rets.js'][907]++;
      if (Instance.utility.first(data.RETS.METADATA[0]["METADATA-CLASS"])) {
        _$jscoverage['rets.js'][908]++;
        parsed.type = "classifications";
        _$jscoverage['rets.js'][909]++;
        parsed.resource = data.RETS.METADATA[0]["METADATA-CLASS"][0].$.Resource;
        _$jscoverage['rets.js'][912]++;
        data.RETS.METADATA[0]["METADATA-CLASS"][0].Class.forEach((function iterate(class_data) {
  _$jscoverage['rets.js'][913]++;
  parsed.data[class_data.ClassName] = class_data;
}));
        _$jscoverage['rets.js'][917]++;
        return callback(null, parsed);
      }
      else {
        _$jscoverage['rets.js'][920]++;
        if (Instance.utility.first(data.RETS.METADATA[0]["METADATA-RESOURCE"])) {
          _$jscoverage['rets.js'][921]++;
          parsed.type = "resources";
          _$jscoverage['rets.js'][922]++;
          parsed.resource = data.RETS.METADATA[0]["METADATA-RESOURCE"][0].$.Resource;
          _$jscoverage['rets.js'][925]++;
          data.RETS.METADATA[0]["METADATA-RESOURCE"][0].Resource.forEach((function iterate(class_data) {
  _$jscoverage['rets.js'][926]++;
  parsed.data[class_data.ResourceID] = class_data;
}));
          _$jscoverage['rets.js'][930]++;
          return callback(null, parsed);
        }
        else {
          _$jscoverage['rets.js'][933]++;
          if (Instance.utility.first(data.RETS.METADATA[0]["METADATA-TABLE"])) {
            _$jscoverage['rets.js'][934]++;
            parsed.type = "fields";
            _$jscoverage['rets.js'][935]++;
            parsed.resource = data.RETS.METADATA[0]["METADATA-TABLE"][0].$.Resource;
            _$jscoverage['rets.js'][938]++;
            data.RETS.METADATA[0]["METADATA-TABLE"][0].Field.forEach((function iterate(class_data) {
  _$jscoverage['rets.js'][939]++;
  parsed.data[class_data.SystemName] = class_data;
}));
            _$jscoverage['rets.js'][943]++;
            return callback(null, parsed);
          }
        }
      }
      _$jscoverage['rets.js'][947]++;
      throw new Error("Unknown RETS METADATA response sub-type.");
    }
    _$jscoverage['rets.js'][952]++;
    if (data.RETS["RETS-STATUS"]) {
      _$jscoverage['rets.js'][953]++;
      parsed.type = "status";
      _$jscoverage['rets.js'][954]++;
      return callback(null, parsed);
    }
    _$jscoverage['rets.js'][957]++;
    throw new Error("Unknown RETS response type, could not identify nor parse.");
  }
  catch (error) {
    _$jscoverage['rets.js'][960]++;
    RETS.debug(error.message);
    _$jscoverage['rets.js'][961]++;
    callback(error, parsed);
  }
}));
  _$jscoverage['rets.js'][967]++;
  return this;
}), enumerable: false, configurable: true, writable: true}, _requestHeaders: {value: (function _requestHeaders() {
  _$jscoverage['rets.js'][981]++;
  RETS.debug("_requestHeaders");
  _$jscoverage['rets.js'][983]++;
  this.set("settings.headers.RETS-Version", ("RETS/" + this.get("settings.version")));
  _$jscoverage['rets.js'][984]++;
  this.set("settings.headers.User-Agent", this.get("settings.agent.user"));
  _$jscoverage['rets.js'][985]++;
  this.set("settings.headers.Accept", "*/*");
  _$jscoverage['rets.js'][987]++;
  if ((this.get("settings.agent.user") && this.get("settings.agent.password"))) {
    _$jscoverage['rets.js'][989]++;
    var ua_a1 = this.utility.md5([this.get("settings.agent.user"), this.get("settings.agent.password")].join(":"));
    _$jscoverage['rets.js'][994]++;
    var ua_dig_resp = this.utility.md5([ua_a1.trim(), this.get("authorization.request", "").trim(), this.get("authorization.session", "").trim(), this.get("authorization.version", "").trim()].join(":"));
    _$jscoverage['rets.js'][1001]++;
    if ((this.get("authorization.session") !== "")) {
      _$jscoverage['rets.js'][1002]++;
      this.set("settings.headers.RETS-Session-ID", this.get("authorization.session"));
      _$jscoverage['rets.js'][1003]++;
      this.set("settings.headers.RETS-UA-Authorization", ("Digest " + ua_dig_resp));
    }
  }
  _$jscoverage['rets.js'][1008]++;
  if (this.get("authorization.cookies")) {
    _$jscoverage['rets.js'][1010]++;
    var _cookies = this.get("authorization.cookies").join("; ");
    _$jscoverage['rets.js'][1013]++;
    _cookies = _cookies.replace("path=/;", "");
    _$jscoverage['rets.js'][1014]++;
    _cookies = _cookies.replace("path=/", "");
    _$jscoverage['rets.js'][1015]++;
    _cookies = _cookies.replace("HttpOnly;", "");
  }
  _$jscoverage['rets.js'][1022]++;
  return this.get("settings.headers");
}), enumerable: false, configurable: true, writable: true}, _handleHeaders: {value: (function _handleHeaders(headers) {
  _$jscoverage['rets.js'][1040]++;
  RETS.debug("_handleHeaders");
  _$jscoverage['rets.js'][1042]++;
  var Instance = this;
  _$jscoverage['rets.js'][1045]++;
  if (headers["RETS-Version"]) {
    _$jscoverage['rets.js'][1046]++;
    Instance.set("authorization.version", headers["RETS-Version"]);
  }
  _$jscoverage['rets.js'][1050]++;
  if (headers["RETS-Request"]) {
    _$jscoverage['rets.js'][1051]++;
    Instance.set("authorization.request", headers["RETS-Request"]);
  }
  _$jscoverage['rets.js'][1055]++;
  if ((headers["Set-Cookie"] && headers["Set-Cookie"].length)) {
    _$jscoverage['rets.js'][1056]++;
    Instance.set("authorization.cookies", headers["Set-Cookie"]);
    _$jscoverage['rets.js'][1058]++;
    headers["Set-Cookie"].forEach((function (value) {
  _$jscoverage['rets.js'][1060]++;
  if ((value.indexOf("RETS-Session-ID") > -1)) {
    _$jscoverage['rets.js'][1063]++;
    var _match = value.match(/RETS-Session-ID\=(.*?)(\;|\s+|$)/);
    _$jscoverage['rets.js'][1065]++;
    Instance.set("authorization.session", _match[1]);
  }
}));
  }
  _$jscoverage['rets.js'][1073]++;
  if (headers["content-type"]) {
    _$jscoverage['rets.js'][1074]++;
    Instance.set("support.format", headers["content-type"]);
  }
  _$jscoverage['rets.js'][1078]++;
  if (headers["x-powered-by"]) {
    _$jscoverage['rets.js'][1079]++;
    Instance.set("server.powered", headers["x-powered-by"]);
  }
  _$jscoverage['rets.js'][1083]++;
  if (headers.server) {
    _$jscoverage['rets.js'][1084]++;
    Instance.set("server.name", headers.server);
  }
  _$jscoverage['rets.js'][1088]++;
  if (headers["rets-server"]) {
    _$jscoverage['rets.js'][1089]++;
    Instance.set("server.rets", headers["rets-server"]);
  }
  _$jscoverage['rets.js'][1092]++;
  return this;
}), enumerable: false, configurable: true, writable: true}});
_$jscoverage['rets.js'][1105]++;
Object.defineProperties((module.exports = RETS), {debug: {value: (require("debug"))("rets:client"), enumerable: true, configurable: true, writable: true}, connect: {value: (function connect(settings, callback) {
  _$jscoverage['rets.js'][1128]++;
  RETS.debug("connect");
  _$jscoverage['rets.js'][1129]++;
  return new RETS(settings, (callback || RETS.prototype.utility.noop));
}), enumerable: true, configurable: true, writable: true}, createConnection: {value: (function createConnection(settings, callback) {
  _$jscoverage['rets.js'][1144]++;
  RETS.debug("createConnection");
  _$jscoverage['rets.js'][1145]++;
  return new RETS(settings, RETS.prototype.utility.noop);
}), enumerable: true, configurable: true, writable: true}});
